{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "f0e4a496-8adf-4439-86dc-53689287a27f",
          "showTitle": false,
          "title": ""
        },
        "id": "d8M1wFudJR5H"
      },
      "source": [
        "# Titanic Analysis\n",
        "(Cloud & Cognitive Services project)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "a57a3691-80fa-4480-aaa9-32fa78e35010",
          "showTitle": false,
          "title": ""
        },
        "id": "cloJnOk1JR5J"
      },
      "source": [
        "## Task\n",
        "Create a model that predicts which passengers survived the Titanic shipwreck <br>\n",
        "Steps:\n",
        "- Perform Exploratory Data Analysis to understand your data\n",
        "- Perform data cleaning (missing, wrong data?)\n",
        "- Consider at least 3 classifications algorithms (and think to the corresponding Spark pipelines) and perform hyperparameter tuning\n",
        "- Compare the best models\n",
        "\n",
        "Download only with the “training set” and perform 80-20 split to obtain your train and test set"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "b854f052-e207-49d6-8cba-660ddf34ac17",
          "showTitle": false,
          "title": ""
        },
        "id": "XKFNQz3UJR5J"
      },
      "source": [
        "## Colab Env\n",
        "Run this code if you're using Colab"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "bd6a9bea-10b5-4c77-ae61-d5abc56d3529",
          "showTitle": false,
          "title": ""
        },
        "id": "cAfF4KiTJR5J"
      },
      "outputs": [],
      "source": [
        "#NOT NEEDED\n",
        "##from google.colab import drive\n",
        "#drive.mount('/gdrive')\n",
        "#%cd /gdrive/MyDrive/BABD/CCS/project #change it with your path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "a62a954c-39d8-4b7c-86c6-9f23551bbd1d",
          "showTitle": false,
          "title": ""
        },
        "id": "vW_1Y2YbJR5J",
        "outputId": "697f462d-a442-460f-9aaf-fd0c8bead3ed",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyspark\n",
            "  Downloading pyspark-3.5.1.tar.gz (317.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m317.0/317.0 MB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from pyspark) (0.10.9.7)\n",
            "Building wheels for collected packages: pyspark\n",
            "  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyspark: filename=pyspark-3.5.1-py2.py3-none-any.whl size=317488491 sha256=962b6a41667e219015ccd3c4d460bbe8159ba95188aed9bcd56caee25e03f214\n",
            "  Stored in directory: /root/.cache/pip/wheels/80/1d/60/2c256ed38dddce2fdd93be545214a63e02fbd8d74fb0b7f3a6\n",
            "Successfully built pyspark\n",
            "Installing collected packages: pyspark\n",
            "Successfully installed pyspark-3.5.1\n"
          ]
        }
      ],
      "source": [
        "!pip install pyspark"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "e0ff3789-2cde-4011-ba6a-ebe68eee52d0",
          "showTitle": false,
          "title": ""
        },
        "id": "joMy_IAHJR5J"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql import SparkSession\n",
        "spark = SparkSession.builder.appName(\"ProjectAnalysis\").getOrCreate()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "d1885360-4bac-4d15-93c8-9e738e8c11b0",
          "showTitle": false,
          "title": ""
        },
        "id": "YS114rF1JR5K"
      },
      "source": [
        "## Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "5465791d-b317-4cc6-880c-849a531cf1c6",
          "showTitle": false,
          "title": ""
        },
        "vscode": {
          "languageId": "plaintext"
        },
        "id": "e3eigH_3JR5K"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql.functions import col, isnan, when, count, desc, udf, regexp_extract, expr, sum as spark_sum\n",
        "from pyspark.sql.types import IntegerType, DoubleType\n",
        "from pyspark.sql import functions as F\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sklearn\n",
        "import pyspark"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "530e090d-1aae-4538-bed2-3d37d9577d6b",
          "showTitle": false,
          "title": ""
        },
        "id": "gMuHAM79JR5K"
      },
      "source": [
        "## Data\n",
        "https://www.kaggle.com/c/titanic/overview"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "f4c94487-0a07-4fe4-872a-19ea66b20f42",
          "showTitle": false,
          "title": ""
        },
        "id": "81RSHxlZJR5K"
      },
      "outputs": [],
      "source": [
        "#!git clone https://github.com/jademene/Cloud-Cognitive-Services.git #import data from public git repo\n",
        "'''\n",
        "df = spark.read \\\n",
        "    .format(\"csv\") \\\n",
        "    .option(\"inferSchema\", \"false\") \\\n",
        "    .option(\"header\", \"true\") \\\n",
        "    .option(\"sep\", \",\") \\\n",
        "    .csv('Cloud-Cognitive-Services/train.csv', header = True)\n",
        "'''\n",
        "df = spark.read.csv('train.csv', header = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "2248133e-e488-4801-b670-cecbc3834032",
          "showTitle": false,
          "title": ""
        },
        "id": "oIuEM3LfJR5K",
        "outputId": "bb787f6c-922b-4725-b342-eacdb3bcc871",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+\n",
            "|PassengerId|Survived|Pclass|                Name|   Sex| Age|SibSp|Parch|          Ticket|   Fare|Cabin|Embarked|\n",
            "+-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+\n",
            "|          1|       0|     3|Braund, Mr. Owen ...|  male|  22|    1|    0|       A/5 21171|   7.25| NULL|       S|\n",
            "|          2|       1|     1|Cumings, Mrs. Joh...|female|  38|    1|    0|        PC 17599|71.2833|  C85|       C|\n",
            "|          3|       1|     3|Heikkinen, Miss. ...|female|  26|    0|    0|STON/O2. 3101282|  7.925| NULL|       S|\n",
            "|          4|       1|     1|Futrelle, Mrs. Ja...|female|  35|    1|    0|          113803|   53.1| C123|       S|\n",
            "|          5|       0|     3|Allen, Mr. Willia...|  male|  35|    0|    0|          373450|   8.05| NULL|       S|\n",
            "|          6|       0|     3|    Moran, Mr. James|  male|NULL|    0|    0|          330877| 8.4583| NULL|       Q|\n",
            "|          7|       0|     1|McCarthy, Mr. Tim...|  male|  54|    0|    0|           17463|51.8625|  E46|       S|\n",
            "|          8|       0|     3|Palsson, Master. ...|  male|   2|    3|    1|          349909| 21.075| NULL|       S|\n",
            "|          9|       1|     3|Johnson, Mrs. Osc...|female|  27|    0|    2|          347742|11.1333| NULL|       S|\n",
            "|         10|       1|     2|Nasser, Mrs. Nich...|female|  14|    1|    0|          237736|30.0708| NULL|       C|\n",
            "|         11|       1|     3|Sandstrom, Miss. ...|female|   4|    1|    1|         PP 9549|   16.7|   G6|       S|\n",
            "|         12|       1|     1|Bonnell, Miss. El...|female|  58|    0|    0|          113783|  26.55| C103|       S|\n",
            "|         13|       0|     3|Saundercock, Mr. ...|  male|  20|    0|    0|       A/5. 2151|   8.05| NULL|       S|\n",
            "|         14|       0|     3|Andersson, Mr. An...|  male|  39|    1|    5|          347082| 31.275| NULL|       S|\n",
            "|         15|       0|     3|Vestrom, Miss. Hu...|female|  14|    0|    0|          350406| 7.8542| NULL|       S|\n",
            "|         16|       1|     2|Hewlett, Mrs. (Ma...|female|  55|    0|    0|          248706|     16| NULL|       S|\n",
            "|         17|       0|     3|Rice, Master. Eugene|  male|   2|    4|    1|          382652| 29.125| NULL|       Q|\n",
            "|         18|       1|     2|Williams, Mr. Cha...|  male|NULL|    0|    0|          244373|     13| NULL|       S|\n",
            "|         19|       0|     3|Vander Planke, Mr...|female|  31|    1|    0|          345763|     18| NULL|       S|\n",
            "|         20|       1|     3|Masselmani, Mrs. ...|female|NULL|    0|    0|            2649|  7.225| NULL|       C|\n",
            "+-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.show(20)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "3108d40b-1447-4555-a25d-eb0f12d83fe4",
          "showTitle": false,
          "title": ""
        },
        "id": "awqKDIumJR5K"
      },
      "source": [
        "## 1) EDA"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "b4da6d63-ab30-4704-8b82-51527baa19b9",
          "showTitle": false,
          "title": ""
        },
        "id": "NYxKJxdVJR5K"
      },
      "source": [
        "### 1.1) Data overview"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "b41765f6-be54-4aaf-9b47-b882bbb19899",
          "showTitle": false,
          "title": ""
        },
        "id": "Eu2dqNvuJR5K",
        "outputId": "cd8baf9c-4dd2-4626-efae-4c56720a6fb6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- PassengerId: string (nullable = true)\n",
            " |-- Survived: string (nullable = true)\n",
            " |-- Pclass: string (nullable = true)\n",
            " |-- Name: string (nullable = true)\n",
            " |-- Sex: string (nullable = true)\n",
            " |-- Age: string (nullable = true)\n",
            " |-- SibSp: string (nullable = true)\n",
            " |-- Parch: string (nullable = true)\n",
            " |-- Ticket: string (nullable = true)\n",
            " |-- Fare: string (nullable = true)\n",
            " |-- Cabin: string (nullable = true)\n",
            " |-- Embarked: string (nullable = true)\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.printSchema()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "c6573071-8d5b-4c68-b518-1dd9c25ea95e",
          "showTitle": false,
          "title": ""
        },
        "id": "mvNmcGqTJR5K"
      },
      "source": [
        "For sake of simplicity we cast some columns from string to numerical"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "b5b5a667-11aa-48f2-ad64-8ebe9eed35d1",
          "showTitle": false,
          "title": ""
        },
        "id": "mVrHI7RAJR5K"
      },
      "outputs": [],
      "source": [
        "df = df\\\n",
        "    .withColumn(\"PassengerId\", col(\"PassengerId\").cast(IntegerType()))\\\n",
        "    .withColumn(\"Survived\", col(\"Survived\").cast(IntegerType()))\\\n",
        "    .withColumn(\"Pclass\", col(\"Pclass\").cast(IntegerType()))\\\n",
        "    .withColumn(\"Age\", col(\"Age\").cast(IntegerType()))\\\n",
        "    .withColumn(\"SibSp\", col(\"SibSp\").cast(IntegerType()))\\\n",
        "    .withColumn(\"Parch\", col(\"Parch\").cast(IntegerType()))\\\n",
        "    .withColumn(\"Fare\", col(\"Fare\").cast(DoubleType()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "cbb54fbf-95c5-4c92-8af0-099efccc09ad",
          "showTitle": false,
          "title": ""
        },
        "id": "buSIfFDZJR5K",
        "outputId": "bf748a0f-c0f7-4bd6-e8d3-6c77149434ee",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- PassengerId: integer (nullable = true)\n",
            " |-- Survived: integer (nullable = true)\n",
            " |-- Pclass: integer (nullable = true)\n",
            " |-- Name: string (nullable = true)\n",
            " |-- Sex: string (nullable = true)\n",
            " |-- Age: integer (nullable = true)\n",
            " |-- SibSp: integer (nullable = true)\n",
            " |-- Parch: integer (nullable = true)\n",
            " |-- Ticket: string (nullable = true)\n",
            " |-- Fare: double (nullable = true)\n",
            " |-- Cabin: string (nullable = true)\n",
            " |-- Embarked: string (nullable = true)\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.printSchema()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "9cf7944b-e4fa-45bb-9055-b053bf48929a",
          "showTitle": false,
          "title": ""
        },
        "id": "8TObV4mzJR5L"
      },
      "source": [
        "- PassengerId: An identifier for each passenger.\n",
        "- Survived: Survival status of the passenger\n",
        "  - 1 = yes\n",
        "  - 0 = no\n",
        "- Pclass: Ticket class as a proxy for socio-economic status\n",
        "  - 1 = 1st,\n",
        "  - 2 = 2nd,\n",
        "  - 3 = 3rd\n",
        "- Name: Full name of the passenger.\n",
        "- Sex: Male or female.\n",
        "- Age: Age in years.\n",
        "- SibSp: Number of siblings/spouses aboard.\n",
        "- Parch: Number of parents/children aboard.\n",
        "- Ticket: Ticket number.\n",
        "- Fare: Passenger fare.\n",
        "- Cabin: Cabin number.\n",
        "- Embarked: Port of embarkation\n",
        "  - C = Cherbourg,\n",
        "  - Q = Queenstown,\n",
        "  - S = Southampton"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "71da46f7-e44f-4e44-aad4-3e20a11acc6e",
          "showTitle": false,
          "title": ""
        },
        "id": "GGFcg3L6JR5L",
        "outputId": "c44daca3-2e88-47dc-c207-bdc9c04456e5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "rows: 891\n",
            "columns: 12\n"
          ]
        }
      ],
      "source": [
        "print(\"rows:\", df.count())\n",
        "print(\"columns:\", len(df.columns))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "5ae2561d-56c1-4125-8740-c92caaa1051c",
          "showTitle": false,
          "title": ""
        },
        "id": "k_Aswg1DJR5L"
      },
      "source": [
        "### 1.3) Duplicate values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "c93a3b94-e9cc-4455-acae-2ec05637bbfc",
          "showTitle": false,
          "title": ""
        },
        "id": "F8bVjrjUJR5L",
        "outputId": "0152d26b-2f89-469a-8af8-aac2319c3f63",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of duplicate rows: 0\n"
          ]
        }
      ],
      "source": [
        "duplicates = df.count() - (df.dropDuplicates()).count()\n",
        "print(f\"Number of duplicate rows: {duplicates}\")\n",
        "\n",
        "# display the duplicate rows\n",
        "if duplicates > 0:\n",
        "    from pyspark.sql.functions import col\n",
        "    # Columns to check for duplicates, if you want to specify: ['column1', 'column2']\n",
        "    df.groupBy(df.columns).count().filter(col('count') > 1).drop('count').show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "cafc165c-a353-4781-b037-9593555c7572",
          "showTitle": false,
          "title": ""
        },
        "id": "D-wvCBAVJR5L"
      },
      "source": [
        "### 1.4) Missing values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "554e8bd4-179e-4b31-836a-32802d430383",
          "showTitle": false,
          "title": ""
        },
        "id": "Denzd4kWJR5L",
        "outputId": "a258a149-190f-457c-cf3e-62d66319771e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------+--------+------+----+---+---+-----+-----+------+----+-----+--------+\n",
            "|PassengerId|Survived|Pclass|Name|Sex|Age|SibSp|Parch|Ticket|Fare|Cabin|Embarked|\n",
            "+-----------+--------+------+----+---+---+-----+-----+------+----+-----+--------+\n",
            "|          0|       0|     0|   0|  0|177|    0|    0|     0|   0|  687|       2|\n",
            "+-----------+--------+------+----+---+---+-----+-----+------+----+-----+--------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "missing_data = df.select([count(when(col(c).isNull(), c)).alias(c) for c in df.columns])\n",
        "missing_data.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "1b8d2a3b-bced-493f-ad3d-570399ff9dea",
          "showTitle": false,
          "title": ""
        },
        "id": "4_RidgYTJR5L"
      },
      "source": [
        "Missing values for:\n",
        "- Age (177 missing values)\n",
        "- Cabin (687 missing values)\n",
        "- Embarked (2 missing values)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "622ea595-3d25-416c-952c-3cbef8581fb5",
          "showTitle": false,
          "title": ""
        },
        "id": "D7cy_oB7JR5a"
      },
      "source": [
        "### 1.5) Statistical summary"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "f700f5b1-6ee2-4b6f-8168-4274d18187f0",
          "showTitle": false,
          "title": ""
        },
        "id": "_BQTjMBGJR5a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a5be10dc-fcdc-4759-d51a-2ac4ed94f437"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------+-----------------+-------------------+------------------+--------------------+------+------------------+------------------+-------------------+------------------+-----------------+-----+--------+\n",
            "|summary|      PassengerId|           Survived|            Pclass|                Name|   Sex|               Age|             SibSp|              Parch|            Ticket|             Fare|Cabin|Embarked|\n",
            "+-------+-----------------+-------------------+------------------+--------------------+------+------------------+------------------+-------------------+------------------+-----------------+-----+--------+\n",
            "|  count|              891|                891|               891|                 891|   891|               714|               891|                891|               891|              891|  204|     889|\n",
            "|   mean|            446.0| 0.3838383838383838| 2.308641975308642|                NULL|  NULL|29.679271708683473|0.5230078563411896|0.38159371492704824|260318.54916792738| 32.2042079685746| NULL|    NULL|\n",
            "| stddev|257.3538420152301|0.48659245426485753|0.8360712409770491|                NULL|  NULL|14.536482769437564|1.1027434322934315| 0.8060572211299488|471609.26868834975|49.69342859718089| NULL|    NULL|\n",
            "|    min|                1|                  0|                 1|\"Andersson, Mr. A...|female|                 0|                 0|                  0|            110152|              0.0|  A10|       C|\n",
            "|    max|              891|                  1|                 3|van Melkebeke, Mr...|  male|                80|                 8|                  6|         WE/P 5735|         512.3292|    T|       S|\n",
            "+-------+-----------------+-------------------+------------------+--------------------+------+------------------+------------------+-------------------+------------------+-----------------+-----+--------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.describe().show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "36e8eacb-37f4-4c3a-aabf-2ea1546ec499",
          "showTitle": false,
          "title": ""
        },
        "id": "bw0_Cq3EJR5a"
      },
      "source": [
        "TODO: fix interpretation\n",
        "\n",
        "- The average age of passengers is approximately 30 years old.\n",
        "- The average fare is around 32.20.\n",
        "- Passengers' ages range from 0 to 80 years.\n",
        "- SibSp range from 0 to 8\n",
        "- Parch range from 0 to 8\n",
        "- Ticket classes, fare, and family size (siblings, spouses, parents, children) vary significantly, indicating diverse socio-economic backgrounds and family traveling situations."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "c28740f6-0ad7-4504-b3f7-936fa3825228",
          "showTitle": false,
          "title": ""
        },
        "id": "5npR_1jrJR5a"
      },
      "source": [
        "### 1.6) Data visualization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "95de0d49-5ca9-4eca-b8bd-092fc5b3fdc9",
          "showTitle": false,
          "title": ""
        },
        "id": "sRklF1FjJR5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "outputId": "896fa1be-367d-4b8c-cf54-c641b0092a2c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.frame.DataFrame</b><br/>def __init__(data=None, index: Axes | None=None, columns: Axes | None=None, dtype: Dtype | None=None, copy: bool | None=None) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py</a>Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n",
              "\n",
              "Data structure also contains labeled axes (rows and columns).\n",
              "Arithmetic operations align on both row and column labels. Can be\n",
              "thought of as a dict-like container for Series objects. The primary\n",
              "pandas data structure.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n",
              "    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n",
              "    data is a dict, column order follows insertion-order. If a dict contains Series\n",
              "    which have an index defined, it is aligned by its index. This alignment also\n",
              "    occurs if data is a Series or a DataFrame itself. Alignment is done on\n",
              "    Series/DataFrame inputs.\n",
              "\n",
              "    If data is a list of dicts, column order follows insertion-order.\n",
              "\n",
              "index : Index or array-like\n",
              "    Index to use for resulting frame. Will default to RangeIndex if\n",
              "    no indexing information part of input data and no index provided.\n",
              "columns : Index or array-like\n",
              "    Column labels to use for resulting frame when data does not have them,\n",
              "    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n",
              "    will perform column selection instead.\n",
              "dtype : dtype, default None\n",
              "    Data type to force. Only a single dtype is allowed. If None, infer.\n",
              "copy : bool or None, default None\n",
              "    Copy data from inputs.\n",
              "    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n",
              "    or 2d ndarray input, the default of None behaves like ``copy=False``.\n",
              "    If data is a dict containing one or more Series (possibly of different dtypes),\n",
              "    ``copy=False`` will ensure that these inputs are not copied.\n",
              "\n",
              "    .. versionchanged:: 1.3.0\n",
              "\n",
              "See Also\n",
              "--------\n",
              "DataFrame.from_records : Constructor from tuples, also record arrays.\n",
              "DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n",
              "read_csv : Read a comma-separated values (csv) file into DataFrame.\n",
              "read_table : Read general delimited file into DataFrame.\n",
              "read_clipboard : Read text from clipboard into DataFrame.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "Please reference the :ref:`User Guide &lt;basics.dataframe&gt;` for more information.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "Constructing DataFrame from a dictionary.\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [1, 2], &#x27;col2&#x27;: [3, 4]}\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d)\n",
              "&gt;&gt;&gt; df\n",
              "   col1  col2\n",
              "0     1     3\n",
              "1     2     4\n",
              "\n",
              "Notice that the inferred dtype is int64.\n",
              "\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int64\n",
              "col2    int64\n",
              "dtype: object\n",
              "\n",
              "To enforce a single dtype:\n",
              "\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d, dtype=np.int8)\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int8\n",
              "col2    int8\n",
              "dtype: object\n",
              "\n",
              "Constructing DataFrame from a dictionary including Series:\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [0, 1, 2, 3], &#x27;col2&#x27;: pd.Series([2, 3], index=[2, 3])}\n",
              "&gt;&gt;&gt; pd.DataFrame(data=d, index=[0, 1, 2, 3])\n",
              "   col1  col2\n",
              "0     0   NaN\n",
              "1     1   NaN\n",
              "2     2   2.0\n",
              "3     3   3.0\n",
              "\n",
              "Constructing DataFrame from numpy ndarray:\n",
              "\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n",
              "...                    columns=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n",
              "&gt;&gt;&gt; df2\n",
              "   a  b  c\n",
              "0  1  2  3\n",
              "1  4  5  6\n",
              "2  7  8  9\n",
              "\n",
              "Constructing DataFrame from a numpy ndarray that has labeled columns:\n",
              "\n",
              "&gt;&gt;&gt; data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n",
              "...                 dtype=[(&quot;a&quot;, &quot;i4&quot;), (&quot;b&quot;, &quot;i4&quot;), (&quot;c&quot;, &quot;i4&quot;)])\n",
              "&gt;&gt;&gt; df3 = pd.DataFrame(data, columns=[&#x27;c&#x27;, &#x27;a&#x27;])\n",
              "...\n",
              "&gt;&gt;&gt; df3\n",
              "   c  a\n",
              "0  3  1\n",
              "1  6  4\n",
              "2  9  7\n",
              "\n",
              "Constructing DataFrame from dataclass:\n",
              "\n",
              "&gt;&gt;&gt; from dataclasses import make_dataclass\n",
              "&gt;&gt;&gt; Point = make_dataclass(&quot;Point&quot;, [(&quot;x&quot;, int), (&quot;y&quot;, int)])\n",
              "&gt;&gt;&gt; pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n",
              "   x  y\n",
              "0  0  0\n",
              "1  0  3\n",
              "2  2  3\n",
              "\n",
              "Constructing DataFrame from Series/DataFrame:\n",
              "\n",
              "&gt;&gt;&gt; ser = pd.Series([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=ser, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df\n",
              "   0\n",
              "a  1\n",
              "c  3\n",
              "\n",
              "&gt;&gt;&gt; df1 = pd.DataFrame([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], columns=[&quot;x&quot;])\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(data=df1, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df2\n",
              "   x\n",
              "a  1\n",
              "c  3</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 490);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "dfp = df.toPandas()\n",
        "type(dfp)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "dfe1b5e0-3ac3-49bf-83ab-9a6f864303d1",
          "showTitle": false,
          "title": ""
        },
        "id": "NmM9B5MRJR5a"
      },
      "outputs": [],
      "source": [
        "def makeBarchart2(df, target, hue, color_palette, title, legend, label_position, xlabel, ylabel='Number of passengers'):\n",
        "    if hue == None:\n",
        "        ax = sns.countplot(x=target, data=df, palette=color_palette)\n",
        "    else:\n",
        "        ax = sns.countplot(x=target, hue=hue, data=df, palette=color_palette)\n",
        "\n",
        "    plt.title(title)\n",
        "    plt.xlabel(xlabel)\n",
        "    plt.ylabel(ylabel)\n",
        "\n",
        "    # Add annotations to each bar\n",
        "    for p in ax.patches:\n",
        "        count = int(p.get_height())\n",
        "        percentage = f'{100 * count / len(df):.1f}%' if count > 0 else '0%'\n",
        "        annotation_text = f'{count}\\n({percentage})'  # Combined text for display\n",
        "        tmp_pos=''\n",
        "        if label_position=='top':\n",
        "            tmp_pos=(p.get_x() + p.get_width() / 2., p.get_height())\n",
        "        else:\n",
        "            tmp_pos=(p.get_x() + p.get_width() / 2., 0)\n",
        "        ax.annotate(\n",
        "            annotation_text,\n",
        "            #(p.get_x() + p.get_width() / 2., p.get_height()), #top\n",
        "            #(p.get_x() + p.get_width() / 2., p.get_height() / 2), #middle\n",
        "            #(p.get_x() + p.get_width() / 2., 0), #bottom\n",
        "            tmp_pos,\n",
        "            ha='center',\n",
        "            va='bottom',\n",
        "            fontsize=10,\n",
        "            color = 'black' if label_position == 'top' else 'white',\n",
        "            xytext=(0, 10),\n",
        "            textcoords='offset points'\n",
        "        )\n",
        "\n",
        "    if legend:\n",
        "        plt.legend(title=hue)\n",
        "\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "81ed7ddb-8638-478d-857a-52b6cf93d418",
          "showTitle": false,
          "title": ""
        },
        "id": "qtOZBOIkJR5a"
      },
      "source": [
        "#### 1.6.1) Survived VS Not Survived"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "d77c3bd7-eb0a-4e6a-a5ea-11cb3d33b9a3",
          "showTitle": false,
          "title": ""
        },
        "id": "lpi16ofIJR5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 577
        },
        "outputId": "5b82fbcb-4ebb-48fb-8a3e-148ae3274fae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-c6a473bd0002>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.countplot(x=target, data=df, palette=color_palette)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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ApXphXt7iIiIiCoDtcPO0KFD8c8//2DAgAGoWrUqZDJZedRFREREpBFqh539+/fjzz//RKtWrcqjHiIiIiKNUvvU8ypVqvC+V0RERPTWUDvszJs3DzNnzkRWVlZ51ENERESkUWofxlqyZAliY2NhY2MDJycn6Orqqkw/f/68xoojIiIiKiu1w07hVZKJiIiI3gZqh51Zs2aVRx1ERERE5ULtMTsAkJqaiu+//x5Tp07Fo0ePADw/fHX//n2NFkdERERUVmrv2bl06RJ8fHygUChw584dDBs2DObm5ti5cyfi4uLw448/lkedRERERKWi9p6dCRMmYNCgQYiJiYG+vr7Y3qVLFxw7dkyjxRERERGVldp7ds6ePYv169cXaa9WrRqUSqVGiiIieps0+sqnoksgqpSiph+u6BIAlGLPjlwuR3p6epH2mzdvwsrKSiNFEREREWmK2mHngw8+wNy5c5GbmwsAkMlkiIuLwxdffIGAgACNF0hERERUFmqHnSVLliAjIwPW1tZ4+vQp2rZtCxcXF5iYmODrr78ujxqJiIiISk3tMTsKhQKhoaE4efIkLl68iIyMDHh4eMDHh8esiYiIqPJRO+wUatWqlXjn89TUVE3VQ0RERKRRah/GWrRoEbZv3y4+79mzJywsLFCtWjVcvHhRo8URERERlZXaYWfdunWwt7cHAISGhiI0NBT79+9H586dMWnSJI0XSERERFQWah/GUiqVYtjZt28fevbsiU6dOsHJyQnNmzfXeIFEREREZaH2np0qVaogPj4eAHDgwAFxYLIgCMjPz9dsdURERERlpPaenY8++gh9+/ZFrVq1kJKSgs6dOwMALly4ABcXF40XSERERFQWaoedZcuWwcnJCfHx8QgODoaxsTEA4MGDBxg5cqTGCyQiIiIqC7XDjq6uLiZOnFikffz48RopiIiIiEiT1B6zs2XLFvz555/i88mTJ8PMzAwtW7bE3bt3NVocERERUVmpHXbmz58PAwMDAEBERARWr16N4OBgWFpacu8OERERVTpqH8aKj48XByLv3r0bAQEB+PTTT9GqVSu0a9dO0/URERERlYnae3aMjY2RkpICADh06BB8fX0BAPr6+nj69KlmqyMiIiIqI7X37Pj6+mLo0KFo3Lgxbt68iS5dugAAoqOj4eTkpOn6iIiIiMpE7T07q1evhpeXF5KT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0qRJmqqLiIiISCPUDjtjx44ttn316tU4d+5cmQsiIiIi0iSN3bq8c+fO+P333zW1OCIiIiKN0FjY+e2338TbPBARERFVFmofxmrcuLHKAGVBEKBUKpGcnKxylhQRERFRZaB22OnevbvKcy0tLVhZWaFdu3ZwdXXVVF1EREREGqF22Jk1a1Z51EFERERULjQ2ZoeIiIioMirxnh0tLa1XXkwQAGQyGfLy8spcFBEREZGmlDjs7Nq166XTIiIisGLFChQUFGikKCIiIiJNKXHY6datW5G2GzduYMqUKdi7dy/69evH+1ERERFRpVOqMTsJCQkYNmwYGjRogLy8PERFRWHLli1wdHTUdH1EREREZaJW2ElLS8MXX3wBFxcXREdHIywsDHv37kX9+vXLqz4iIiKiMinxYazg4GAsWrQItra2+OWXX4o9rEVERERU2ZQ47EyZMgUGBgZwcXHBli1bsGXLlmL77dy5U2PFEREREZVVicPOwIEDX3vqOREREVFlU+Kws3nz5nIsg4iIiKh88ArKREREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaQw7REREJGkMO0RERCRpDDtEREQkaRUado4dOwZ/f3/Y2dlBJpNh9+7dKtMFQcDMmTNRtWpVGBgYwMfHBzExMSp9Hj16hH79+sHU1BRmZmYYMmQIMjIy3uBWEBERUWVWoWEnMzMT7u7uWL16dbHTg4ODsWLFCqxbtw6nT5+GkZER/Pz88OzZM7FPv379EB0djdDQUOzbtw/Hjh3Dp59++qY2gYiIiCo5nYpceefOndG5c+dipwmCgOXLl2P69Ono1q0bAODHH3+EjY0Ndu/ejd69e+PatWs4cOAAzp49iyZNmgAAVq5ciS5dumDx4sWws7N7Y9tCRERElVOlHbNz+/ZtKJVK+Pj4iG0KhQLN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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "title = f'Survied VS Not Survied (Total Passengers: {len(dfp)})'\n",
        "makeBarchart2(dfp,'Survived',None, ['#d93725', '#21913c'], title, None, None, 'Status')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO\n",
        "Change labels:\n",
        "- 0 -> causalities\n",
        "- 1 -> survived"
      ],
      "metadata": {
        "id": "r6bKjDLMyzPi"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "1cc454b3-6634-4a29-a953-476019ada3b4",
          "showTitle": false,
          "title": ""
        },
        "id": "uB-CiL2oJR5a"
      },
      "source": [
        "#### 1.6.2) Survived VS Not Survived splitted by gender"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "91117170-ab8b-43b1-95c1-15a826058753",
          "showTitle": false,
          "title": ""
        },
        "id": "nxLYlyUtJR5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 577
        },
        "outputId": "39d30206-db97-43d5-c469-82d797405a9a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-c6a473bd0002>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.countplot(x=target, data=df, palette=color_palette)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "makeBarchart2(dfp,'Sex',None,['blue','pink'],'Passangers by Sex', None, None, 'Sex')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "2bf66a3a-4e02-4d91-9193-4c85999cd149",
          "showTitle": false,
          "title": ""
        },
        "id": "eOMUXYKFJR5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 577
        },
        "outputId": "9af873c6-9d3b-4269-e3ca-dc7c0f7bb345"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-c6a473bd0002>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.countplot(x=target, data=df, palette=color_palette)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "makeBarchart2(dfp[dfp['Survived'] == 1],'Sex',None,['pink','blue'],'Survived by Sex', None, None, 'Sex')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "27047d3f-d148-49cc-80a8-97e0775820d1",
          "showTitle": false,
          "title": ""
        },
        "id": "JMtoDanSJR5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "4ef7ce40-e535-40a0-e45d-9d96d5b4a34d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "makeBarchart2(dfp,'Sex','Survived','mako','Survived by Sex', 'Survived', None, 'Sex')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: change color"
      ],
      "metadata": {
        "id": "QKz7gl8uzhCU"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "fa2666a2-9cc2-4948-86c9-c589561b9c70",
          "showTitle": false,
          "title": ""
        },
        "id": "TX0J-YiXJR5b"
      },
      "source": [
        "#### 1.6.3) Passangers Class"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "f44663d9-1732-4e39-9b64-9eda1eebfc63",
          "showTitle": false,
          "title": ""
        },
        "id": "K8Ul6Me9JR5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 577
        },
        "outputId": "63d540e3-29e0-4687-dfd6-f09dd24e9f36"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-c6a473bd0002>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.countplot(x=target, data=df, palette=color_palette)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "makeBarchart2(dfp,'Pclass',None,'mako','Passangers by Class', None, None, 'Class')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "c1e571ee-57fe-4694-a1af-a16c129fd8bc",
          "showTitle": false,
          "title": ""
        },
        "id": "dciUBOYuJR5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 577
        },
        "outputId": "0007bd0e-0be9-4a65-831d-ec97cbbf6074"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-c6a473bd0002>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.countplot(x=target, data=df, palette=color_palette)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "makeBarchart2(dfp[dfp['Survived'] == 1],'Pclass',None,'mako','Survived by Class', None, None, 'Class')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "abbd5ef3-cf99-4bb9-911f-e98501bffa85",
          "showTitle": false,
          "title": ""
        },
        "id": "mrjhcrx5JR5b"
      },
      "source": [
        "#### 1.6.4) Passangers Age"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "fe66bc16-cf6a-489c-9137-52eab7af3488",
          "showTitle": false,
          "title": ""
        },
        "id": "vRPJYCKPJR5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "outputId": "a774c908-66a0-4d32-8dff-931ac47c8257"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "survived_passengers = dfp[dfp['Survived'] == 1]\n",
        "not_survived_passengers = dfp[dfp['Survived'] == 0]\n",
        "\n",
        "fig, axs = plt.subplots(1, 2, figsize=(15, 6))\n",
        "\n",
        "# Survived plot\n",
        "sns.histplot(survived_passengers['Age'], bins=20, color='#21913c', kde=True, ax=axs[0])\n",
        "axs[0].set_title('Survived')\n",
        "axs[0].set_xlabel('Age')\n",
        "axs[0].set_ylabel('Frequency')\n",
        "\n",
        "# Not Survived plot\n",
        "sns.histplot(not_survived_passengers['Age'], bins=20, color='#d93725', kde=True, ax=axs[1])\n",
        "axs[1].set_title('Not Survived')\n",
        "axs[1].set_xlabel('Age')\n",
        "axs[1].set_ylabel('Frequency')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter data for survivors and casualties\n",
        "survivors_age = df.filter(col(\"Survived\") == \"1\").select(\"Age\").collect()\n",
        "casualties_age = df.filter(col(\"Survived\") == \"0\").select(\"Age\").collect()\n",
        "\n",
        "# Extract ages from Row objects and convert to float\n",
        "survivors_age = [float(row.Age) for row in survivors_age if row.Age is not None]\n",
        "casualties_age = [float(row.Age) for row in casualties_age if row.Age is not None]\n",
        "\n",
        "# Prepare data for box plots\n",
        "data = [survivors_age, casualties_age]\n",
        "labels = ['Survivors', 'Casualties']\n",
        "\n",
        "# Create box plots\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.boxplot(data, labels=labels, patch_artist=True, showmeans=True)\n",
        "plt.xlabel('Passenger Status')\n",
        "plt.ylabel('Age')\n",
        "plt.title('Box Plot of Age for Survivors and Casualties')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "sq885138zsix",
        "outputId": "1c202b5e-44b8-41ae-f34e-0160452b927f"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the casualties there are more outliers and the boxplot is longer (the age of the casualties tends to be between 66 and 1, while survivors are between 0 and 60)"
      ],
      "metadata": {
        "id": "p5ZcmR3V1Rpg"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "b631cc3f-27be-48d2-b4af-700fce1b1109",
          "showTitle": false,
          "title": ""
        },
        "id": "1GiH0C5BJR5b"
      },
      "source": [
        "#### 1.6.5) Port of embarkation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "e651a170-494f-469f-8acd-80cdac82ad58",
          "showTitle": false,
          "title": ""
        },
        "id": "X0Y6MNUSJR5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "outputId": "8b86658a-f313-473e-ba32-3c5cb2afd130"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#makeBarchart2(dfp[dfp['Survived'] == 1],'Embarked',None,'mako','',None,'top','Port of Embarkation') #not split by gender\n",
        "makeBarchart2(dfp,'Embarked','Survived','mako','','Sex','top','Port of Embarkation')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: delete '0%'"
      ],
      "metadata": {
        "id": "txKyaJac0Orp"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "886d3204-2a96-4b5d-9bcf-0809fe37a17b",
          "showTitle": false,
          "title": ""
        },
        "id": "cr0oD1glJR5b"
      },
      "source": [
        "explanation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "1fb2330b-a755-430f-890c-54e4b3044cb3",
          "showTitle": false,
          "title": ""
        },
        "id": "wTlFbclsJR5b"
      },
      "source": [
        "#### 1.6.6) Number of siblings/spouses aboard (SibSp)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "81f004ac-f51e-4af7-8093-0a3052f5f230",
          "showTitle": false,
          "title": ""
        },
        "id": "_cs9J8vcJR5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "outputId": "7c7e1193-efb8-4eda-cc93-4f7a513695f6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-c6a473bd0002>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.countplot(x=target, data=df, palette=color_palette)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#makeBarchart2(dfp,'SibSp',None,'mako','Passangers by SibSp',None,'top','SibSp') #all\n",
        "makeBarchart2(dfp[dfp['Survived'] == 1],'SibSp',None,'mako','Survived by SibSp',None,'top','SibSp') #survived"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "9d9400fd-0ae7-42c7-b1e6-d0b8f019863e",
          "showTitle": false,
          "title": ""
        },
        "id": "1qTbHRZOJR5b"
      },
      "source": [
        "We can see that passengers with fewer siblings/spouses (SibSp) had a higher survival rate compared to those with more siblings/spouses. This suggests that having a smaller family size might have increased the chances of survival."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "e419fd5f-90b8-4cc1-9c4c-3fd9bd66b4b7",
          "showTitle": false,
          "title": ""
        },
        "id": "zmJMyadTJR5c"
      },
      "source": [
        "#### 1.6.7) Number of parents/children aboard"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "3c08d9ea-a2d2-43e1-9bf5-b44fd0ee0193",
          "showTitle": false,
          "title": ""
        },
        "id": "hsULo7QAJR5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "outputId": "9ef0592a-01cd-431c-ecb1-b2578d65b9ed"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-c6a473bd0002>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.countplot(x=target, data=df, palette=color_palette)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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EREBZ2dnfPXVV/jpp5+wYcMG3LhxA/Hx8dDX18eMGTPk1tXT00NmZmax901ERKQKvPS8FJibm8s9d+bNZavOzs5Sm4WFBczNzaWbgi1duhTGxsaYN2+e1OfPP/+Era0tzpw5g+bNmyultjVr1sDExATdunVDjx490L17d2hpaeHzzz/HtGnT5PqmpKTAwsJCKfslIiIqLQw7eD3Scv/+fRgaGhb5wX6KqFevHrZu3Yq0tDQAkJ4FdPHiRenhiSkpKXjy5AnMzc2RlpaG58+fQwghrQNAGlV58eKFXHthXr58CQDv7PfkyRNMnz4doaGhSEtLQ1ZWlrTt1NRU5OTkyK1/+fJltGzZ8r37JiIiKg1CCLx48QI2NjbQ0Hj7ySqZ+JBzImri7t27Ct2IjIiIiMqOO3fuvPOmtxzZAaRJh3fu3JFGWpStbdu2+OKLLzB48GAAr0dcJk2ahD179kBDQwOenp6YO3eu3Je1fft2/PLLL0hMTISenh6aNm2K77//XrqL7IkTJ9C5c2f8/fffsLe3BwD873//w8aNGwvsf+/evWjVqpX0/vDhw5g1axYOHz4speHMzEz873//w5EjR9CkSRMEBwdLp622b9+OOXPm4Pz58yXy+RARESkqLS0Ntra27714gCM7eP1hGRsbIzU1tcTCzr59+xAYGIiYmJh3DrWVVc2bN8eoUaPQt29fVZdCREQEoOi/3xzZKSWdOnVCQkIC7t27V+5Omb25c7MyH35IRERUWjiyg9IZ2SEiIiLlKurvd/k7n0JERESkAIYdIiIiUmsMO0RERKTWGHaIiIhIrTHsEBERkVpj2CEiIiK1xrBDREREao1hh4iIiNQaww4RERGpNYYdIiIiUmsMO0RERKTWGHaIiIhIrTHsEBERkVqrpOoCyht3p7aqLqHcOh8XruoSiIioAuLIDhEREak1hh0iIiJSaww7REREpNYYdoiIiEitMewQERGRWmPYISIiIrXGsENERERqjWGHiIiI1BrDDhEREak1hh0iIiJSaww7REREpNYYdoiIiEitMewQERGRWmPYISIiIrXGsENERERqjWGHiIiI1BrDDhEREak1hh0iIiJSaww7REREpNYYdoiIiEitMewQERGRWmPYISIiIrXGsENERERqjWGHiIiI1BrDDhEREak1hh0iIiJSaww7REREpNYYdoiIiEit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o5RSGFFZd+PGDSxfvhzjxo3D5MmTce7cOYwaNQra2toYMGAAgNensHr06IGaNWsiMTERkydPhq+vLyIjI+WuaCQiopKj8E0F165di6+++gra2towMzODTCb7v43JZLhx44bSiyxpvKlg6VC3mwpqa2vD3d0dp0+fltpGjRqFc+fOITIystB1bty4gVq1auHw4cNo165daZVKRKSWivr7rfCl51OnTsW0adOQmpqKW7du4ebNm9KrPAYdouKqWrUqnJ2d5drq1auHpKSkt67j4OAAc3Nz3pOKiKgUKRx2MjMz0bt3b2hoKLwqkVrx9PREfHy8XNu1a9feOcft7t27ePr0KapWrVrS5RER0f+ncGIZMmQItm3bVhK1EJUrY8eORVRUFGbNmoXr169j48aNWLVqFfz9/QEA6enpCAwMRFRUFG7duoUjR46gW7ducHR0hI+Pj4qrJyKqOBSes5OXl4fOnTvj5cuXaNiwIbS0tOSWL1iwQKkFlgbO2Skd6jZnBwD27t2LSZMmISEhATVr1sS4ceOkq7FevnyJ7t2749KlS3j+/DlsbGzg7e2NH374AVZWViqunIio/CuxB4HOnj0boaGhqFu3LgAUmKBMVJF07twZnTt3LnSZnp4eQkNDS7kiIiL6L4XDzs8//4zff/8dAwcOLIFyiIiIiJRL4Tk7Ojo68PT0LIlaiIiIiJRO4bAzevRoLFmypCRqISIiIlI6hU9jnT17FuHh4di7dy/q169fYILyjh07lFYcERER0YdSOOyYmJigR48eJVELERERkdIpHHb+/YRnovLo6dOnqFevHs6ePYsaNWqouhyFXL16Fd7e3oiPj0flypVVXQ4RUbnA2yBThTNz5kx069ZNCjqjRo2Cm5sbdHR00KhRo0LX2bp1Kxo1agR9fX3Y29vjp59+eu9+UlJS0K9fPxgZGcHExARDhgxBenq6tPzWrVto3bo1KleujNatW+PWrVty63fu3Bl//fWXXJuzszOaN29eLu9nRUSkKgqHnZo1a8LBweGtL6KyLDMzE8HBwRgyZIhc++DBg9GrV69C1zlw4AD69euHESNGICYmBsuWLcPChQvx66+/vnNf/fr1w5UrVxAWFoa9e/fi+PHjGD58uLR8/PjxqFatGqKjo1G1alV888030rItW7ZAQ0MDfn5+BbY7aNAgLF++HLm5uYocOhFR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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "makeBarchart2(dfp[dfp['Survived'] == 1],'Parch',None,'mako','Survived by Parch',None,'top','Number of parents/children aboard')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "70ef91b5-f1c8-46c2-bebe-0a237f931ce2",
          "showTitle": false,
          "title": ""
        },
        "id": "hHp2zmOoJR5c"
      },
      "source": [
        "#### 1.6.8) Ticket Fare"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "2f3990bf-5b6c-435d-9947-cdbf5aaf5717",
          "showTitle": false,
          "title": ""
        },
        "id": "LspT1OC0JR5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 413
        },
        "outputId": "0879eca4-2c9c-4e91-b551-4f5ed4235d2f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Filter the DataFrame for survived and not survived passengers separately\n",
        "survived_fare = dfp[dfp['Survived'] == 1]['Fare']\n",
        "not_survived_fare = dfp[dfp['Survived'] == 0]['Fare']\n",
        "\n",
        "# Setting up the figure and axes for the subplots\n",
        "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 6))\n",
        "\n",
        "# Plotting the distribution of fares for survivors\n",
        "sns.histplot(survived_fare, kde=True, color='green', bins=30, ax=axes[0])\n",
        "axes[0].set_title('Distribution of Fare for Survived Passengers')\n",
        "axes[0].set_xlabel('Fare')\n",
        "axes[0].set_ylabel('Frequency')\n",
        "axes[0].grid(True)\n",
        "\n",
        "# Plotting the distribution of fares for non-survivors\n",
        "sns.histplot(not_survived_fare, kde=True, color='red', bins=30, ax=axes[1])\n",
        "axes[1].set_title('Distribution of Fare for Not Survived Passengers')\n",
        "axes[1].set_xlabel('Fare')\n",
        "axes[1].set_ylabel('Frequency')\n",
        "axes[1].grid(True)\n",
        "\n",
        "# Displaying the plots\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "d0b56fef-6559-4d58-be3e-5bb2ee0084eb",
          "showTitle": false,
          "title": ""
        },
        "id": "52sElNguJR5c"
      },
      "source": [
        "- Survived Plot: The distribution is right-skewed, meaning that most of the survived passengers paid lower fares, with a few paying much higher fares. This indicates that while a range of passengers across different fare levels survived, a significant proportion of survivors purchased cheaper tickets."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter data for survivors and casualties\n",
        "survivors_fare = df.filter(col(\"Survived\") == \"1\").select(\"Fare\").collect()\n",
        "casualties_fare = df.filter(col(\"Survived\") == \"0\").select(\"Fare\").collect()\n",
        "\n",
        "# Extract fares from Row objects\n",
        "survivors_fare = [row.Fare for row in survivors_fare if row.Fare is not None]\n",
        "casualties_fare = [row.Fare for row in casualties_fare if row.Fare is not None]\n",
        "\n",
        "# Prepare data for box plots\n",
        "data = [survivors_fare, casualties_fare]\n",
        "labels = ['Survivors', 'Casualties']\n",
        "\n",
        "# Create box plots\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.boxplot(data, labels=labels, patch_artist=True, showmeans=True)\n",
        "plt.xlabel('Passenger Status')\n",
        "plt.ylabel('Fare')\n",
        "plt.title('Box Plot of Fare for Survivors and Casualties')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "5Az6A_qn046u",
        "outputId": "bddeb783-ce4a-484b-ccd5-1c5c2c8e8843"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The casualties payed a lower fare then casualties, with some outliers in both distributions. In the survivors especially there is an extremely high 500+ fare."
      ],
      "metadata": {
        "id": "_jHb9n4I1ODc"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "d820cb75-e97a-41fd-9ac5-6d8ba8b6e6ef",
          "showTitle": false,
          "title": ""
        },
        "id": "F5eEECWWJR5c"
      },
      "source": [
        "#### 1.6.9) Cabin (test)\n",
        "NOTE: These representation are just a test!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "cfdccb75-0022-4227-9a98-26aa21ede370",
          "showTitle": false,
          "title": ""
        },
        "id": "_5R4G9UxJR5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "outputId": "4473259a-abb7-4308-946f-7edeb9da45e8"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'Deck'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3652\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3653\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3654\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'Deck'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-29-a62e2b527fe6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdfp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdfp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Deck'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m#drop rows with missing cabin values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3759\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3760\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3761\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3762\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3763\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3653\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3654\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3655\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3656\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3657\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'Deck'"
          ]
        }
      ],
      "source": [
        "# dfp = dfp[dfp['Deck'] != None] #drop rows with missing cabin values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "29fdc4f4-31ea-404f-be15-5bc2787548e4",
          "showTitle": false,
          "title": ""
        },
        "id": "ZEOLCp7wJR5c"
      },
      "source": [
        "Bar Chart of Deck vs. Survival: Create a bar chart showing survival rates by deck."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "7dc4df28-bfef-43a4-82a8-edda06a77979",
          "showTitle": false,
          "title": ""
        },
        "id": "1QrlWPAgJR5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "78f4e628-3205-4f0f-9603-69a4e3f21bf3"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'Deck'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-30-0e7cb89acb37>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Survival rates by deck\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0msurvival_by_deck\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Deck'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Survived'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0msurvival_by_deck\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Deck'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Survival_Rate'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Ensure that the deck column is sorted, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mgroupby\u001b[0;34m(self, by, axis, level, as_index, sort, group_keys, observed, dropna)\u001b[0m\n\u001b[1;32m   8250\u001b[0m         \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8251\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 8252\u001b[0;31m         return DataFrameGroupBy(\n\u001b[0m\u001b[1;32m   8253\u001b[0m             \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8254\u001b[0m             \u001b[0mkeys\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mby\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, obj, keys, axis, level, grouper, exclusions, selection, as_index, sort, group_keys, observed, dropna)\u001b[0m\n\u001b[1;32m    929\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mgrouper\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 931\u001b[0;31m             grouper, exclusions, obj = get_grouper(\n\u001b[0m\u001b[1;32m    932\u001b[0m                 \u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m                 \u001b[0mkeys\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/groupby/grouper.py\u001b[0m in \u001b[0;36mget_grouper\u001b[0;34m(obj, key, axis, level, sort, observed, validate, dropna)\u001b[0m\n\u001b[1;32m    983\u001b[0m                 \u001b[0min_axis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    984\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 985\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    986\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGrouper\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgpr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    987\u001b[0m             \u001b[0;31m# Add key to exclusions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'Deck'"
          ]
        }
      ],
      "source": [
        "# Survival rates by deck\n",
        "'''\n",
        "survival_by_deck = dfp.groupby('Deck')['Survived'].mean().reset_index()\n",
        "survival_by_deck.columns = ['Deck', 'Survival_Rate']\n",
        "\n",
        "# Ensure that the deck column is sorted, if necessary\n",
        "survival_by_deck.sort_values('Deck', inplace=True)\n",
        "\n",
        "# Plotting the survival rates by deck\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Deck', y='Survival_Rate', data=survival_by_deck, palette='viridis')\n",
        "plt.title('Survival Rates by Deck')\n",
        "plt.xlabel('Deck')\n",
        "plt.ylabel('Survival Rate')\n",
        "plt.ylim(0, 1)  # Set the y-axis limits to show proportions from 0 to 1\n",
        "plt.show()\n",
        "'''"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "08414ad4-6f2c-46da-a4d6-11006699eff2",
          "showTitle": false,
          "title": ""
        },
        "id": "VuzXbVTlJR5d"
      },
      "source": [
        "- Decks D and E show particularly high survival rates, which could suggest better access to lifeboats or more advantageous locations in case of emergency. This might indicate that passengers on these decks had a higher socio-economic status, as these areas possibly offered premium accommodations.\n",
        "- Deck A has the lowest survival rate among the higher-tier decks, while Deck G and especially T have notably lower survival rates. Deck T, interestingly, shows a very low survival rate, which may indicate that this was a more isolated part of the ship, or had poorer access to emergency exits and lifeboats.\n",
        "- Decks B and C show moderate survival rates. Despite likely being higher-tier accommodations (similar to A, D, and E), their survival rates aren't as high as D and E, suggesting that factors other than simply ticket class (such as cabin location relative to lifeboats) influenced survival chances."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "ab922662-a647-4fd1-b26f-bf224c95524f",
          "showTitle": false,
          "title": ""
        },
        "id": "Dn9-WEGdJR5d"
      },
      "source": [
        "Count Plot: Display the distribution of passengers across different decks."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "c18b1649-3fb6-47a2-a7e9-fccf24447a5f",
          "showTitle": false,
          "title": ""
        },
        "id": "8l4XcEfWJR5d"
      },
      "outputs": [],
      "source": [
        "# Counting the number of passengers per deck\n",
        "'''\n",
        "deck_counts = dfp['Deck'].value_counts().reset_index()\n",
        "deck_counts.columns = ['Deck', 'Count']\n",
        "\n",
        "# Sort the counts by Deck to ensure the plot is ordered\n",
        "deck_counts.sort_values('Deck', inplace=True)\n",
        "\n",
        "# Plotting the distribution of passengers across decks\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Deck', y='Count', data=deck_counts, palette='coolwarm')\n",
        "plt.title('Distribution of Passengers by Deck')\n",
        "plt.xlabel('Deck')\n",
        "plt.ylabel('Number of Passengers')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "'''"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "dee50590-816e-4fcc-81a3-e3169b59e2de",
          "showTitle": false,
          "title": ""
        },
        "id": "AbVwBvLHJR5d"
      },
      "source": [
        "- Most Populated Decks: Decks C, B, and D had the highest number of passengers. This correlates with the survival rates to some extent where Deck D has both a high population and high survival rate, likely indicating good emergency access.\n",
        "- Least Populated Decks: Deck T has very few passengers, which correlates with the very low survival rate shown. The small number of people and possibly poor location could explain their low survival probability.\n",
        "- Lower Decks with Fewer People: Decks G and F have fewer passengers compared to mid and upper decks, with Deck G showing a particularly low survival rate. This suggests that, despite having fewer passengers, their chances of survival were not as high, potentially due to poorer access to lifeboat areas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "a9400868-bfa8-4ef4-92be-8d75d8061636",
          "showTitle": false,
          "title": ""
        },
        "id": "_lf69wjJJR5d"
      },
      "source": [
        "Socio-economic Influence: The data likely reflect socio-economic disparities where higher decks, presumably with more expensive accommodations, generally show better survival rates. This might be due to a combination of factors including cabin location, the socio-economic status of passengers, and perhaps more immediate responses or access to lifeboats.\n",
        "Emergency Preparedness and Location: The layout of the ship and the emergency preparedness of different areas likely played a crucial role. Decks with better accessibility to lifeboats show higher survival rates."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2) Data Cleaning"
      ],
      "metadata": {
        "id": "2zigSL7Jw7iO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2.1) Names Feature engineering\n",
        "Extracts titles from the \"Name\" column and replace less common titles with more common ones.\n",
        "\n",
        "TODO: change title!"
      ],
      "metadata": {
        "id": "PXqWmisgkvem"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "5733f0da-a7f2-4783-b826-5c935cec07c3",
          "showTitle": false,
          "title": ""
        },
        "id": "ukIHGDwHJR5M"
      },
      "outputs": [],
      "source": [
        "# get the title from 'Name' column\n",
        "df = df.withColumn(\"Title\", regexp_extract(\"Name\", \"([A-Za-z]+)\\.\", 1))\n",
        "#df.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "4fcf28cc-a0a5-4fb8-a832-711d68afae19",
          "showTitle": false,
          "title": ""
        },
        "id": "BWmn7cTEJR5M",
        "outputId": "6489b41d-9d99-403c-ebb1-2bf50788f733",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------+-----+\n",
            "|   Title|count|\n",
            "+--------+-----+\n",
            "|     Don|    1|\n",
            "|    Miss|  182|\n",
            "|Countess|    1|\n",
            "|     Col|    2|\n",
            "|     Rev|    6|\n",
            "|    Lady|    1|\n",
            "|  Master|   40|\n",
            "|     Mme|    1|\n",
            "|    Capt|    1|\n",
            "|      Mr|  517|\n",
            "|      Dr|    7|\n",
            "|     Mrs|  125|\n",
            "|     Sir|    1|\n",
            "|Jonkheer|    1|\n",
            "|    Mlle|    2|\n",
            "|   Major|    2|\n",
            "|      Ms|    1|\n",
            "+--------+-----+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "title_count = df.groupBy(\"Title\").count()\n",
        "title_count.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "8996df2d-5160-4326-ace1-667735fa78a5",
          "showTitle": false,
          "title": ""
        },
        "id": "fNQbcb36JR5M"
      },
      "source": [
        "Let's fix wierd titles like Mlle, Mme ect!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "ea1b490f-13f2-410b-af3c-15699a1cd425",
          "showTitle": false,
          "title": ""
        },
        "id": "su-RU_i1JR5R",
        "outputId": "bdde58dd-324c-4b5b-e0d3-c5bc1dc36de7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+------+\n",
            "|PassengerId|Survived|Pclass|                Name|   Sex| Age|SibSp|Parch|          Ticket|   Fare|Cabin|Embarked| Title|\n",
            "+-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+------+\n",
            "|          1|       0|     3|Braund, Mr. Owen ...|  male|  22|    1|    0|       A/5 21171|   7.25| NULL|       S|    Mr|\n",
            "|          2|       1|     1|Cumings, Mrs. Joh...|female|  38|    1|    0|        PC 17599|71.2833|  C85|       C|   Mrs|\n",
            "|          3|       1|     3|Heikkinen, Miss. ...|female|  26|    0|    0|STON/O2. 3101282|  7.925| NULL|       S|  Miss|\n",
            "|          4|       1|     1|Futrelle, Mrs. Ja...|female|  35|    1|    0|          113803|   53.1| C123|       S|   Mrs|\n",
            "|          5|       0|     3|Allen, Mr. Willia...|  male|  35|    0|    0|          373450|   8.05| NULL|       S|    Mr|\n",
            "|          6|       0|     3|    Moran, Mr. James|  male|NULL|    0|    0|          330877| 8.4583| NULL|       Q|    Mr|\n",
            "|          7|       0|     1|McCarthy, Mr. Tim...|  male|  54|    0|    0|           17463|51.8625|  E46|       S|    Mr|\n",
            "|          8|       0|     3|Palsson, Master. ...|  male|   2|    3|    1|          349909| 21.075| NULL|       S|Master|\n",
            "|          9|       1|     3|Johnson, Mrs. Osc...|female|  27|    0|    2|          347742|11.1333| NULL|       S|   Mrs|\n",
            "|         10|       1|     2|Nasser, Mrs. Nich...|female|  14|    1|    0|          237736|30.0708| NULL|       C|   Mrs|\n",
            "|         11|       1|     3|Sandstrom, Miss. ...|female|   4|    1|    1|         PP 9549|   16.7|   G6|       S|  Miss|\n",
            "|         12|       1|     1|Bonnell, Miss. El...|female|  58|    0|    0|          113783|  26.55| C103|       S|  Miss|\n",
            "|         13|       0|     3|Saundercock, Mr. ...|  male|  20|    0|    0|       A/5. 2151|   8.05| NULL|       S|    Mr|\n",
            "|         14|       0|     3|Andersson, Mr. An...|  male|  39|    1|    5|          347082| 31.275| NULL|       S|    Mr|\n",
            "|         15|       0|     3|Vestrom, Miss. Hu...|female|  14|    0|    0|          350406| 7.8542| NULL|       S|  Miss|\n",
            "|         16|       1|     2|Hewlett, Mrs. (Ma...|female|  55|    0|    0|          248706|   16.0| NULL|       S|   Mrs|\n",
            "|         17|       0|     3|Rice, Master. Eugene|  male|   2|    4|    1|          382652| 29.125| NULL|       Q|Master|\n",
            "|         18|       1|     2|Williams, Mr. Cha...|  male|NULL|    0|    0|          244373|   13.0| NULL|       S|    Mr|\n",
            "|         19|       0|     3|Vander Planke, Mr...|female|  31|    1|    0|          345763|   18.0| NULL|       S|   Mrs|\n",
            "|         20|       1|     3|Masselmani, Mrs. ...|female|NULL|    0|    0|            2649|  7.225| NULL|       C|   Mrs|\n",
            "+-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "replacement_dict = {\n",
        "    'Mlle': 'Miss',\n",
        "    'Mme': 'Miss',\n",
        "    'Ms': 'Miss',\n",
        "    'Dr': 'Mr',\n",
        "    'Major': 'Mr',\n",
        "    'Lady': 'Mrs',\n",
        "    'Countess': 'Mrs',\n",
        "    'Jonkheer': 'Other',\n",
        "    'Col': 'Other',\n",
        "    'Rev': 'Other',\n",
        "    'Capt': 'Mr',\n",
        "    'Sir': 'Mr',\n",
        "    'Don': 'Mr'\n",
        "}\n",
        "\n",
        "# Replace values in the 'Title' column\n",
        "for old_value, new_value in replacement_dict.items():\n",
        "    df = df.withColumn(\"Title\", when(df[\"Title\"] == old_value, new_value).otherwise(df[\"Title\"]))\n",
        "\n",
        "df.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Group by Gender, Class, and Title, and calculate the approximate avg age for each group\n",
        "avg_age_by_group = df.groupBy(\"Sex\", \"Pclass\", \"Title\").agg(F.mean(\"Age\").alias(\"AvgAge\"))\n",
        "\n",
        "# Fill Missing Age Values with Corresponding Avg Age\n",
        "df_with_avg = df.join(avg_age_by_group, [\"Sex\", \"Pclass\", \"Title\"], \"left\")\n",
        "\n",
        "#Replace missing values in the 'Age' column with the AvgAge where missing\n",
        "df = df_with_avg.withColumn(\"Age\", when(col(\"Age\").isNull(), col(\"AvgAge\")).otherwise(col(\"Age\")))\n",
        "\n",
        "df = df.drop(\"AvgAge\") # Drop temp col\n",
        "df.show(20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bJZlrLYcl1pu",
        "outputId": "c7d3d056-9a8a-4b38-908e-353c766851e5"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------+------+------+-----------+--------+--------------------+------------------+-----+-----+----------------+-------+-----+--------+\n",
            "|   Sex|Pclass| Title|PassengerId|Survived|                Name|               Age|SibSp|Parch|          Ticket|   Fare|Cabin|Embarked|\n",
            "+------+------+------+-----------+--------+--------------------+------------------+-----+-----+----------------+-------+-----+--------+\n",
            "|  male|     3|    Mr|          1|       0|Braund, Mr. Owen ...|              22.0|    1|    0|       A/5 21171|   7.25| NULL|       S|\n",
            "|female|     1|   Mrs|          2|       1|Cumings, Mrs. Joh...|              38.0|    1|    0|        PC 17599|71.2833|  C85|       C|\n",
            "|female|     3|  Miss|          3|       1|Heikkinen, Miss. ...|              26.0|    0|    0|STON/O2. 3101282|  7.925| NULL|       S|\n",
            "|female|     1|   Mrs|          4|       1|Futrelle, Mrs. Ja...|              35.0|    1|    0|          113803|   53.1| C123|       S|\n",
            "|  male|     3|    Mr|          5|       0|Allen, Mr. Willia...|              35.0|    0|    0|          373450|   8.05| NULL|       S|\n",
            "|  male|     3|    Mr|          6|       0|    Moran, Mr. James| 28.69868995633188|    0|    0|          330877| 8.4583| NULL|       Q|\n",
            "|  male|     1|    Mr|          7|       0|McCarthy, Mr. Tim...|              54.0|    0|    0|           17463|51.8625|  E46|       S|\n",
            "|  male|     3|Master|          8|       0|Palsson, Master. ...|               2.0|    3|    1|          349909| 21.075| NULL|       S|\n",
            "|female|     3|   Mrs|          9|       1|Johnson, Mrs. Osc...|              27.0|    0|    2|          347742|11.1333| NULL|       S|\n",
            "|female|     2|   Mrs|         10|       1|Nasser, Mrs. Nich...|              14.0|    1|    0|          237736|30.0708| NULL|       C|\n",
            "|female|     3|  Miss|         11|       1|Sandstrom, Miss. ...|               4.0|    1|    1|         PP 9549|   16.7|   G6|       S|\n",
            "|female|     1|  Miss|         12|       1|Bonnell, Miss. El...|              58.0|    0|    0|          113783|  26.55| C103|       S|\n",
            "|  male|     3|    Mr|         13|       0|Saundercock, Mr. ...|              20.0|    0|    0|       A/5. 2151|   8.05| NULL|       S|\n",
            "|  male|     3|    Mr|         14|       0|Andersson, Mr. An...|              39.0|    1|    5|          347082| 31.275| NULL|       S|\n",
            "|female|     3|  Miss|         15|       0|Vestrom, Miss. Hu...|              14.0|    0|    0|          350406| 7.8542| NULL|       S|\n",
            "|female|     2|   Mrs|         16|       1|Hewlett, Mrs. (Ma...|              55.0|    0|    0|          248706|   16.0| NULL|       S|\n",
            "|  male|     3|Master|         17|       0|Rice, Master. Eugene|               2.0|    4|    1|          382652| 29.125| NULL|       Q|\n",
            "|  male|     2|    Mr|         18|       1|Williams, Mr. Cha...|32.892857142857146|    0|    0|          244373|   13.0| NULL|       S|\n",
            "|female|     3|   Mrs|         19|       0|Vander Planke, Mr...|              31.0|    1|    0|          345763|   18.0| NULL|       S|\n",
            "|female|     3|   Mrs|         20|       1|Masselmani, Mrs. ...|33.515151515151516|    0|    0|            2649|  7.225| NULL|       C|\n",
            "+------+------+------+-----------+--------+--------------------+------------------+-----+-----+----------------+-------+-----+--------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The following code needs to be tried, it's not necessary to put it but maybe it's useful"
      ],
      "metadata": {
        "id": "Tk839C2eVkJ0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "from pyspark.sql.functions import regexp_replace\n",
        "\n",
        "# Define a regular expression pattern to match the titles to be replaced\n",
        "titles_to_replace = [\"Capt\", \"Col\", \"Major\", \"Dr\", \"Rev\"]\n",
        "pattern = \"|\".join(titles_to_replace)\n",
        "\n",
        "# Replace titles in the \"Title\" column with \"Officer\"\n",
        "df = df.withColumn(\"Title\", regexp_replace(col(\"Title\"), pattern, \"Officer\"))\n",
        "\n",
        "# Show the updated DataFrame\n",
        "df.select(\"Title\").distinct().show(truncate=False)\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "id": "4gLdvR7-VsPA",
        "outputId": "8060962b-395f-4c5e-befd-682b3f308a9d"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nfrom pyspark.sql.functions import regexp_replace\\n\\n# Define a regular expression pattern to match the titles to be replaced\\ntitles_to_replace = [\"Capt\", \"Col\", \"Major\", \"Dr\", \"Rev\"]\\npattern = \"|\".join(titles_to_replace)\\n\\n# Replace titles in the \"Title\" column with \"Officer\"\\ndf = df.withColumn(\"Title\", regexp_replace(col(\"Title\"), pattern, \"Officer\"))\\n\\n# Show the updated DataFrame\\ndf.select(\"Title\").distinct().show(truncate=False)\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "\n",
        "from pyspark.sql.functions import regexp_replace\n",
        "\n",
        "# Define a regular expression pattern to match the additional titles to be replaced\n",
        "additional_titles_to_replace = [\"Jonkheer\", \"Don\", \"Sir\", \"the Countess\", \"Dona\", \"Lady\"]\n",
        "additional_pattern = \"|\".join(additional_titles_to_replace)\n",
        "\n",
        "# Replace additional titles in the \"Title\" column with \"Noble\"\n",
        "df = df.withColumn(\"Title\", regexp_replace(col(\"Title\"), additional_pattern, \"Noble\"))\n",
        "\n",
        "# Show the updated DataFrame\n",
        "df.select(\"Title\").distinct().show(truncate=False)\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 103
        },
        "id": "o0kA6vw_VwNs",
        "outputId": "4df75eaf-a5cc-42d3-a5df-9536e3e59504"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\n\\nfrom pyspark.sql.functions import regexp_replace\\n\\n# Define a regular expression pattern to match the additional titles to be replaced\\nadditional_titles_to_replace = [\"Jonkheer\", \"Don\", \"Sir\", \"the Countess\", \"Dona\", \"Lady\"]\\nadditional_pattern = \"|\".join(additional_titles_to_replace)\\n\\n# Replace additional titles in the \"Title\" column with \"Noble\"\\ndf = df.withColumn(\"Title\", regexp_replace(col(\"Title\"), additional_pattern, \"Noble\"))\\n\\n# Show the updated DataFrame\\ndf.select(\"Title\").distinct().show(truncate=False)\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "from pyspark.sql.functions import regexp_replace\n",
        "\n",
        "# Define a dictionary to map titles to their replacements\n",
        "title_replacements = {\n",
        "    \"Mme\": \"Mrs\",\n",
        "    \"Ms\": \"Mrs\",\n",
        "    \"Mlle\": \"Miss\"\n",
        "}\n",
        "\n",
        "# Iterate over the dictionary and replace titles in the \"Title\" column\n",
        "for old_title, new_title in title_replacements.items():\n",
        "    df = df.withColumn(\"Title\", regexp_replace(col(\"Title\"), old_title, new_title))\n",
        "\n",
        "# Show the updated DataFrame\n",
        "df.select(\"Title\").distinct().show(truncate=False)\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "id": "zUOY1tasV11l",
        "outputId": "6646898c-004a-4b94-bbc0-bf5f65362b52"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nfrom pyspark.sql.functions import regexp_replace\\n\\n# Define a dictionary to map titles to their replacements\\ntitle_replacements = {\\n    \"Mme\": \"Mrs\",\\n    \"Ms\": \"Mrs\",\\n    \"Mlle\": \"Miss\"\\n}\\n\\n# Iterate over the dictionary and replace titles in the \"Title\" column\\nfor old_title, new_title in title_replacements.items():\\n    df = df.withColumn(\"Title\", regexp_replace(col(\"Title\"), old_title, new_title))\\n\\n# Show the updated DataFrame\\ndf.select(\"Title\").distinct().show(truncate=False)\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2.2) Managing \"Age\" missing values\n",
        "\n",
        "Options:\n",
        "- drop rows with missing values\n",
        "- knn\n",
        "- title + mean/median (https://www.kaggle.com/code/ylt0609/3-strategies-analyzing-age-and-their-impact)\n",
        "- sara/jade idea -> regression\n",
        "\n",
        "The following code explains the third option"
      ],
      "metadata": {
        "id": "MrYDPHKAmVwD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 2.2.1) Imputation of null values in Age\n",
        "\n",
        "Group the DataFrame by gender, class, and title, calculat the avg. age for each group, fill missing age values with the corresponding median age, and drops the temporary column used for calculating the avg age."
      ],
      "metadata": {
        "id": "Y2U7k0bdlJ91"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "e16a5634-eee4-49c1-8d93-9f8d8f1b5437",
          "showTitle": false,
          "title": ""
        },
        "id": "orJZV2O7JR5R"
      },
      "outputs": [],
      "source": [
        "#Imputation only by title\n",
        "\n",
        "#average_age_by_title = df.groupBy(\"Title\").agg(F.mean(\"Age\").alias(\"AvgAge\"))\n",
        "\n",
        "# Join the original DataFrame with the average age DataFrame on the Title column\n",
        "#df_with_avg = df.join(average_age_by_title, \"Title\", \"left\")\n",
        "\n",
        "# Replace missing values in the 'Age' column with the AvgAge where missing\n",
        "#df = df_with_avg.withColumn(\"Age\", when(col(\"Age\").isNull(), col(\"AvgAge\")).otherwise(col(\"Age\")))\n",
        "#df = df.drop(\"AvgAge\")\n",
        "#df.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "c4eed9e2-5d94-44c2-8c23-d913f2cc2f1d",
          "showTitle": false,
          "title": ""
        },
        "id": "K35t4IahJR5S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed5a7ffd-01a8-4b52-84c3-6c7aa2f6157d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ],
      "source": [
        "# check if it worked\n",
        "missing_age_count = df.filter(col('Age').isNull()).count()\n",
        "print(missing_age_count)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "6607098f-f9d5-46d8-ac5d-25c16904b9a7",
          "showTitle": false,
          "title": ""
        },
        "id": "zQk9JKIhJR5S"
      },
      "source": [
        "### 2.3) Managing \"Embarked\" missing values\n",
        "OPTIONS:\n",
        "- 1) Drop rows\n",
        "- 2) Impute values with most frequent embarkation"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Option 1\n",
        "df = df.filter(col(\"Embarked\").isNotNull())"
      ],
      "metadata": {
        "id": "jO1s_CAG9-gd"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "dc968813-48a3-4cad-a801-255effc08acc",
          "showTitle": false,
          "title": ""
        },
        "id": "7HsyOyXQJR5Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "da36b8dc-b7f5-423c-e0c4-7b674412aeaf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nfrequent_embarkation = df    .groupby(\"Embarked\")    .count()    .orderBy(col(\"count\").desc())    .select(\"Embarked\")    .first()[0]\\n\\ndf = df    .withColumn(\"Embarked\", when(col(\"Embarked\").isNull(), frequent_embarkation).otherwise(col(\"Embarked\")))\\n  '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "# Option 2\n",
        "'''\n",
        "frequent_embarkation = df\\\n",
        "    .groupby(\"Embarked\")\\\n",
        "    .count()\\\n",
        "    .orderBy(col(\"count\").desc())\\\n",
        "    .select(\"Embarked\")\\\n",
        "    .first()[0]\n",
        "\n",
        "df = df\\\n",
        "    .withColumn(\"Embarked\", when(col(\"Embarked\").isNull(), frequent_embarkation).otherwise(col(\"Embarked\")))\n",
        "  '''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "cf827282-43d8-48b3-97f8-576240f556c7",
          "showTitle": false,
          "title": ""
        },
        "id": "iAc5HHLEJR5a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "895e87de-6841-4a7d-b616-ad44f30829ef"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "missing_embarked_data = df.filter(col(\"Embarked\").isNull())\n",
        "missing_embarked_data.count()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "4dc4724e-7649-4680-ba56-e69b8bd56ba8",
          "showTitle": false,
          "title": ""
        },
        "id": "CJvCfhOaJR5Z"
      },
      "source": [
        "### 2.4) Managing \"Cabin\" missing values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "c291dbcf-175a-48dd-b733-b0013e24789e",
          "showTitle": false,
          "title": ""
        },
        "id": "YuM-d3jQJR5S"
      },
      "source": [
        "OPTIONS:\n",
        "- 1) convert 'Cabin' column into binary indicator\n",
        "    - 0 => passenger doesn't have a cabin\n",
        "    - 1 => passenger has a cabin\n",
        "- 2) cut off rows with missing values and then analise the deck (problem: too many missing values)\n",
        "- 3) Create new category (Not Available)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "0b35fb25-c9b3-4a17-8a77-39b61c56797a",
          "showTitle": false,
          "title": ""
        },
        "id": "WnuPCYGfJR5S"
      },
      "outputs": [],
      "source": [
        "# Option 1\n",
        "#df = df.withColumn('Cabin2', when(col('Cabin').isNull(), 0).otherwise(1))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Option 2\n",
        "df = df.withColumn(\"Cabin\", when(col(\"Cabin\").isNull(), \"NA\").otherwise(col(\"Cabin\")))"
      ],
      "metadata": {
        "id": "EV0OjxLY_FIN"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "9597945c-463e-4d4c-a947-fd86e1af6865",
          "showTitle": false,
          "title": ""
        },
        "id": "8h6_HmWLJR5S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b6fcbe92-ed7c-436c-9186-71679fbada6a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ],
      "source": [
        "missing_cabin_data = df.filter(col(\"Cabin\").isNull())\n",
        "missing_cabin_data.count()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "6b461557-75d9-4803-911b-55e5d3b8a2ff",
          "showTitle": false,
          "title": ""
        },
        "id": "-BoIqQMJJR5S"
      },
      "source": [
        "##### 2.4.1) Extracting Deck Information (test)\n",
        "Typically, cabin numbers on the Titanic are indicated by a letter followed by a number (e.g., C123). The letter usually denotes the deck, and this can be critical because the deck's proximity to the lifeboats could influence survival chances.<br>\n",
        "Since the first letter of the cabin number represents the deck, you can extract this to analyze:\n",
        "- New Column for Deck: Create a new column in your dataset representing the deck (extracted from the cabin's first letter).\n",
        "- Analyze by Deck: Perform statistical tests and visualizations to determine if certain decks had higher survival rates."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "5f5c806b-cc3b-402f-988f-9c4aedc9723f",
          "showTitle": false,
          "title": ""
        },
        "id": "t9NiKhc0JR5Z"
      },
      "outputs": [],
      "source": [
        "# df = df.withColumn(\"Deck\", expr(\"substring(Cabin, 1, 1)\"))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "f805e670-4a51-40f6-943b-bc8c9563bd87",
          "showTitle": false,
          "title": ""
        },
        "id": "2zSiT_bhJR5d"
      },
      "source": [
        "### 2.5) Features Relationship"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sxms0GGVHI7_",
        "outputId": "802b00b4-5eb1-48df-ab54-06da0013626b"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------+------+------+-----------+--------+--------------------+------------------+-----+-----+----------------+-------+-----+--------+\n",
            "|   Sex|Pclass| Title|PassengerId|Survived|                Name|               Age|SibSp|Parch|          Ticket|   Fare|Cabin|Embarked|\n",
            "+------+------+------+-----------+--------+--------------------+------------------+-----+-----+----------------+-------+-----+--------+\n",
            "|  male|     3|    Mr|          1|       0|Braund, Mr. Owen ...|              22.0|    1|    0|       A/5 21171|   7.25|   NA|       S|\n",
            "|female|     1|   Mrs|          2|       1|Cumings, Mrs. Joh...|              38.0|    1|    0|        PC 17599|71.2833|  C85|       C|\n",
            "|female|     3|  Miss|          3|       1|Heikkinen, Miss. ...|              26.0|    0|    0|STON/O2. 3101282|  7.925|   NA|       S|\n",
            "|female|     1|   Mrs|          4|       1|Futrelle, Mrs. Ja...|              35.0|    1|    0|          113803|   53.1| C123|       S|\n",
            "|  male|     3|    Mr|          5|       0|Allen, Mr. Willia...|              35.0|    0|    0|          373450|   8.05|   NA|       S|\n",
            "|  male|     3|    Mr|          6|       0|    Moran, Mr. James| 28.69868995633188|    0|    0|          330877| 8.4583|   NA|       Q|\n",
            "|  male|     1|    Mr|          7|       0|McCarthy, Mr. Tim...|              54.0|    0|    0|           17463|51.8625|  E46|       S|\n",
            "|  male|     3|Master|          8|       0|Palsson, Master. ...|               2.0|    3|    1|          349909| 21.075|   NA|       S|\n",
            "|female|     3|   Mrs|          9|       1|Johnson, Mrs. Osc...|              27.0|    0|    2|          347742|11.1333|   NA|       S|\n",
            "|female|     2|   Mrs|         10|       1|Nasser, Mrs. Nich...|              14.0|    1|    0|          237736|30.0708|   NA|       C|\n",
            "|female|     3|  Miss|         11|       1|Sandstrom, Miss. ...|               4.0|    1|    1|         PP 9549|   16.7|   G6|       S|\n",
            "|female|     1|  Miss|         12|       1|Bonnell, Miss. El...|              58.0|    0|    0|          113783|  26.55| C103|       S|\n",
            "|  male|     3|    Mr|         13|       0|Saundercock, Mr. ...|              20.0|    0|    0|       A/5. 2151|   8.05|   NA|       S|\n",
            "|  male|     3|    Mr|         14|       0|Andersson, Mr. An...|              39.0|    1|    5|          347082| 31.275|   NA|       S|\n",
            "|female|     3|  Miss|         15|       0|Vestrom, Miss. Hu...|              14.0|    0|    0|          350406| 7.8542|   NA|       S|\n",
            "|female|     2|   Mrs|         16|       1|Hewlett, Mrs. (Ma...|              55.0|    0|    0|          248706|   16.0|   NA|       S|\n",
            "|  male|     3|Master|         17|       0|Rice, Master. Eugene|               2.0|    4|    1|          382652| 29.125|   NA|       Q|\n",
            "|  male|     2|    Mr|         18|       1|Williams, Mr. Cha...|32.892857142857146|    0|    0|          244373|   13.0|   NA|       S|\n",
            "|female|     3|   Mrs|         19|       0|Vander Planke, Mr...|              31.0|    1|    0|          345763|   18.0|   NA|       S|\n",
            "|female|     3|   Mrs|         20|       1|Masselmani, Mrs. ...|33.515151515151516|    0|    0|            2649|  7.225|   NA|       C|\n",
            "+------+------+------+-----------+--------+--------------------+------------------+-----+-----+----------------+-------+-----+--------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "bf8c22ee-b971-4565-a945-48af2be76ba8",
          "showTitle": false,
          "title": ""
        },
        "id": "hWYrWhhcJR5d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        },
        "outputId": "99152935-81c9-4805-89d4-a4a830a97dd6"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'DataFrame' object has no attribute 'select_dtypes'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-44-cfdc26f00b31>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnumeric_columns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect_dtypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'int'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'float'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mcorr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnumeric_columns\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'coolwarm'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfmt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\".2f\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   3125\u001b[0m         \"\"\"\n\u001b[1;32m   3126\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3127\u001b[0;31m             raise AttributeError(\n\u001b[0m\u001b[1;32m   3128\u001b[0m                 \u001b[0;34m\"'%s' object has no attribute '%s'\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3129\u001b[0m             )\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'select_dtypes'"
          ]
        }
      ],
      "source": [
        "numeric_columns = df.select_dtypes(include=['int', 'float']).columns\n",
        "\n",
        "corr = df[numeric_columns].corr()\n",
        "\n",
        "sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "e6b3fe32-21d0-4736-8ac3-5f24c227fc4b",
          "showTitle": false,
          "title": ""
        },
        "id": "xRvb0-8NJR5d"
      },
      "outputs": [],
      "source": [
        "sns.pairplot(dfp, hue='Survived')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2.6) Fare modeling\n",
        "\n",
        "To treat the outliers in Fare i decided to replace values above 500 (definetly too high) with the next highest values, in order to have really high fare, which is still telling us that those passegers were wealthy and were probably in first class"
      ],
      "metadata": {
        "id": "APJDVaCsoY6x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark.sql.functions import when\n",
        "\n",
        "# Replace values above 200 in the \"Fare\" column with 150\n",
        "df = df.withColumn(\"Fare\", when(col(\"Fare\") > 200, 150).otherwise(col(\"Fare\")))\n",
        "\n",
        "# Show the updated DataFrame\n",
        "df.select(\"Fare\").show()"
      ],
      "metadata": {
        "id": "veORx2LCpDxu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "67f6dfb3-38fe-49c8-a7e3-52a4c82d0a61"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------+\n",
            "|   Fare|\n",
            "+-------+\n",
            "|   7.25|\n",
            "|71.2833|\n",
            "|  7.925|\n",
            "|   53.1|\n",
            "|   8.05|\n",
            "| 8.4583|\n",
            "|51.8625|\n",
            "| 21.075|\n",
            "|11.1333|\n",
            "|30.0708|\n",
            "|   16.7|\n",
            "|  26.55|\n",
            "|   8.05|\n",
            "| 31.275|\n",
            "| 7.8542|\n",
            "|   16.0|\n",
            "| 29.125|\n",
            "|   13.0|\n",
            "|   18.0|\n",
            "|  7.225|\n",
            "+-------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert fare column to FloatType\n",
        "df = df.withColumn(\"Fare\", df[\"Fare\"].cast(\"float\"))\n",
        "\n",
        "# Filter data for survivors and casualties\n",
        "survivors_fare = df.filter(col(\"Survived\") == \"1\").select(\"Fare\").collect()\n",
        "casualties_fare = df.filter(col(\"Survived\") == \"0\").select(\"Fare\").collect()\n",
        "\n",
        "# Extract fares from Row objects\n",
        "survivors_fare = [row.Fare for row in survivors_fare if row.Fare is not None]\n",
        "casualties_fare = [row.Fare for row in casualties_fare if row.Fare is not None]\n",
        "\n",
        "# Prepare data for box plots\n",
        "data = [survivors_fare, casualties_fare]\n",
        "labels = ['Survivors', 'Casualties']\n",
        "\n",
        "# Create box plots\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.boxplot(data, labels=labels, patch_artist=True, showmeans=True)\n",
        "plt.xlabel('Passenger Status')\n",
        "plt.ylabel('Fare')\n",
        "plt.title('Box Plot of Fare for Survivors and Casualties')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "asXOjbMIo945",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "outputId": "839ae23d-0f2f-404f-ba0f-97fb9bd9ee4b"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "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x4wZM3Dv3j18/vnnaNOmDU6ePAlfX1/07t0bFy5cwPfff49FixahTp06AAAXF5dS97t69WoMHz4cLVq0wNy5c3H9+nX8+9//xqFDhxAfHw9HR0d88MEHaNCgAVasWCEtNQgICHjiuAzH/WF16tTB77//jsOHD6N///7w8vJCamoqvvjiC7Rv3x5//PEHbGxsjJ4zevRouLi4YNq0acjPzwcAfPfddxg6dCg6d+6MTz/9FHfv3sUXX3yB559/HvHx8UaB9WG9e/eGo6Mjxo0bhwEDBqBbt27SkoCzZ88iIiIC9vb2mDRpEiwsLPDll1+iffv2OHDgAFq2bPnEukri4+MDnU4n1VyePvroI1haWmLChAkoKChAw4YN4e/vjx9++KHYa23YsAG1a9dG586dS9xXv379MGTIEPz+++9o0aKF1H7lyhUcOXIE8+fPl9pee+01rFmzBn379sX48eNx9OhRzJ07F0lJSdiyZYvRfs+fP48BAwZg5MiReP3119GgQQOcPXsWPXr0QJMmTTBr1ixYWVnh0qVLOHTo0BPH/MUXX6BRo0Z46aWXoFar8dNPP2H06NHQ6/UYM2aMUd9Lly6hb9++GDFiBIYOHYpvvvkGw4YNQ2hoKBo1agTgQdCKjIyEVqvF+++/D1tbW6xYscKk2eW7d+9iz549aNu2LerWrfvE/gDw73//Gy+99BIGDRqEwsJC/Pe//8XLL7+MmJgYdO/eHQD+1vEpycaNG3H37l2MGjUKzs7OOHbsGD7//HNcu3YNGzduLPV53333HV577TU899xzeOONNwDgsd/7pn5f9unTB2fPnsVbb70FX19f3LhxA7t27cLVq1dL/d4lAgAIohpu1apVAkCxLysrK7F69Wqjvlu3bhUAxOzZs43a+/btKxQKhbh06ZLUNnnyZKFUKsXBgwfFxo0bBQCxePHiJ9azb98+AUB888034ubNmyItLU38/PPPwtfXVygUCvH7778LIYRISUkRAMSqVauk5zZr1ky4urqKrKwsqe306dNCqVSKIUOGSG3z588XAERKSsoT6yksLBSurq6icePG4t69e1J7TEyMACCmTZsmtRmOpaHGxyntuBt+LN29e7fYc+Li4gQA8e233xbbz/PPPy+0Wq3UfufOHeHo6Chef/11o31kZGQIBweHYu2PMhzf+fPnG7VHRUUJS0tLkZyc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Hvx8GDhwoPTzo3bt2qJjx45izZo1QqfTSf2+/vprUa9ePWFlZSWCgoLEqlWril2Cy9Tjk5ycLDp16iSsrKyEm5ubmDJliti1a1exS4H98ccfolOnTqJWrVqiTp064vXXX5cuY/bwz5mSLgV27tw50bZtW6HRaAQA6Xv0cZcie9z3ZWZmphgzZowICgoStra2wsHBQbRs2VL88MMPJh1nqtkUQpTTinkiIiIiIjPjmlsiIiIikg2GWyIiIiKSDYZbIiIiIpINhlsiIiIikg2GWyIiIiKSDYZbIiIiIpIN3sQBD+51nZaWBjs7uzLdlpSIiIiIKocQAnfu3IGnp+djbzjDcAsgLS2t3O8HT0RERETl788//4SXl1ep2xluAdjZ2QF4cLCe9r7wRERERFRxcnNz4e3tLeW20jDcAtJSBHt7e4ZbIiIioirsSUtIeUIZEREREckGwy0RERERyQbDLRERERHJBsMtEREREckGwy0RERERyQbDLRERERHJBsMtEREREckGwy0RERERyQbDLRERERHJBsMtEREREckGwy0RERERyQbDLRERERHJBsMtEREREcmG2twFENUUhYWFWLZsGZKTkxEQEIDRo0fD0tLS3GURERHJCsMtUSWYNGkSFi1aBK1WK7VNnDgR48aNw7x588xYGRERkbxwWQJRBZs0aRLmz58PZ2dnrFy5Eunp6Vi5ciWcnZ0xf/58TJo0ydwlEhERyYZCCCHMXYS55ebmwsHBATk5ObC3tzd3OSQjhYWFsLW1hbOzM65duwa1+n9/LNFqtfDy8kJWVhby8/O5RIGIiOgxTM1rnLklqkDLli2DVqvF7NmzjYItAKjVasyaNQtarRbLli0zU4VERETywnBLVIGSk5MBAD169Chxu6Hd0I+IiIj+HoZbogoUEBAAAIiJiSlxu6Hd0I+IiIj+Hq65BdfcUsXhmlsiIqLywTW3RFWApaUlxo0bh+vXr8PLywsrVqxAWloaVqxYAS8vL1y/fh3jxo1jsCUiIionvM4tUQUzXMd20aJFGDlypNSuVqsxceJEXueWiIioHHFZArgsgSoH71BGRET09EzNawy3YLglIiIiquq45paIiIiIahyGWyIiIiKSDYZbIiIiIpINhlsiIiIikg2GWyIiIiKSDYZbIiIiIpINhlsiIiIikg2GWyIiIiKSDYZbIiIiIpIN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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Extract fares from the DataFrame\n",
        "fares = df.select(\"Fare\").rdd.flatMap(lambda x: x).collect()\n",
        "\n",
        "# Plot histogram\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.hist(fares, bins=20, color='skyblue', edgecolor='black')\n",
        "plt.xlabel('Fare')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Fare')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "y6lVGB5Zo57x",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "outputId": "89d12e9c-8fc8-4656-c5a9-78e4fc79827c"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark.sql.functions import format_number\n",
        "\n",
        "# Clean the \"Fare\" column to have two decimal places\n",
        "df = df.withColumn(\"Fare\", format_number(col(\"Fare\"), 2))\n",
        "\n",
        "# Show the cleaned \"Fare\" column\n",
        "df.select(\"Fare\").show()"
      ],
      "metadata": {
        "id": "iVvJms5RogqX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "741b3014-b50b-4755-956a-119c964f92c1"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----+\n",
            "| Fare|\n",
            "+-----+\n",
            "| 7.25|\n",
            "|71.28|\n",
            "| 7.93|\n",
            "|53.10|\n",
            "| 8.05|\n",
            "| 8.46|\n",
            "|51.86|\n",
            "|21.08|\n",
            "|11.13|\n",
            "|30.07|\n",
            "|16.70|\n",
            "|26.55|\n",
            "| 8.05|\n",
            "|31.27|\n",
            "| 7.85|\n",
            "|16.00|\n",
            "|29.12|\n",
            "|13.00|\n",
            "|18.00|\n",
            "| 7.22|\n",
            "+-----+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "931155b5-942f-48db-bdb7-8ea7f008b5e1",
          "showTitle": false,
          "title": ""
        },
        "id": "osUgXu9KJR5d"
      },
      "source": [
        "## 3) Modeling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "fcca8305-54d3-405a-a073-6d67c61bb036",
          "showTitle": false,
          "title": ""
        },
        "id": "SJFlR3pEJR5d"
      },
      "source": [
        "### 3.1) Feature engineering"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "9b25976d-8c08-4fc6-8749-608dad848de0",
          "showTitle": false,
          "title": ""
        },
        "id": "YzbnayQoJR5d"
      },
      "source": [
        "#### 3.1.1) AgeCategory"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "828d390f-d1c5-4b8a-a3da-a58cb7d40ace",
          "showTitle": false,
          "title": ""
        },
        "id": "oJDAdD0DJR5d"
      },
      "outputs": [],
      "source": [
        "df = df.withColumn(\"AgeCategory\",\n",
        "    F.when(df['Age'] <= 17, 0)\n",
        "    .when((df['Age'] > 17) & (df['Age'] <= 32), 1)\n",
        "    .when((df['Age'] > 32) & (df['Age'] <= 48), 2)\n",
        "    .when((df['Age'] > 48) & (df['Age'] <= 64), 3)\n",
        "    .otherwise(4)\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "45a56e25-c0ee-4e97-9f0c-1561328362bd",
          "showTitle": false,
          "title": ""
        },
        "id": "EZSFQPzTJR5d"
      },
      "source": [
        "#### 3.1.2) Sex\n",
        "Convert categorical features into numerical\n",
        "- Sex:\n",
        "  - male = 1,\n",
        "  - female = 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "9d3a272e-9f4d-412e-b2fb-28967969bcf5",
          "showTitle": false,
          "title": ""
        },
        "id": "oRKpv7a9JR5d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "outputId": "37c7f4df-6315-4386-8415-d3b808866e23"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'df' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-1926d0e13795>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwithColumn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Sex\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Sex\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"male\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0motherwise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ],
      "source": [
        "df = df.withColumn(\"Sex\", when(df[\"Sex\"] == \"male\", 1).otherwise(2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "b5ffe7da-c350-47de-b92b-618e550917ca",
          "showTitle": false,
          "title": ""
        },
        "id": "IO9romL6JR5d"
      },
      "source": [
        "#### 3.1.3) Embarked\n",
        "Convert categorical features into numerical\n",
        "- Embarked:\n",
        "  - C = 1,\n",
        "  - Q = 2,\n",
        "  - S = 3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "d2c1257d-90b4-4783-b4fe-816238148fb8",
          "showTitle": false,
          "title": ""
        },
        "id": "5ePCPhihJR5e"
      },
      "outputs": [],
      "source": [
        "df = df.withColumn(\"Embarked\", when(df[\"Embarked\"] == \"C\", 1).when(df[\"Embarked\"] == \"Q\", 2).otherwise(3))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "75fe7259-2ff7-4012-90f3-28dcb4a3b3ec",
          "showTitle": false,
          "title": ""
        },
        "id": "KQLF-ihVJR5e"
      },
      "source": [
        "Let's create e new df with the most important feautes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "cc86d6e7-6722-4115-9ded-09007b3e68ec",
          "showTitle": false,
          "title": ""
        },
        "id": "r0WALEwVJR5e"
      },
      "outputs": [],
      "source": [
        "df2=df.drop('Name','Cabin','Ticket','Fare','Title', 'Age','Deck')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "beec9ca7-a272-4104-853b-a50535c474c4",
          "showTitle": false,
          "title": ""
        },
        "id": "ZfYKDU9IJR5e"
      },
      "source": [
        "Let's see how it looks!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "d68776fa-816b-4534-a474-acde4da1ad38",
          "showTitle": false,
          "title": ""
        },
        "id": "fd9JBChwJR5e",
        "outputId": "8b625e92-73dd-4235-8b8b-9693f2f5ea4d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- PassengerId: integer (nullable = true)\n",
            " |-- Survived: integer (nullable = true)\n",
            " |-- Pclass: integer (nullable = true)\n",
            " |-- Sex: integer (nullable = false)\n",
            " |-- SibSp: integer (nullable = true)\n",
            " |-- Parch: integer (nullable = true)\n",
            " |-- Embarked: integer (nullable = false)\n",
            " |-- Cabin2: integer (nullable = false)\n",
            " |-- AgeCategory: integer (nullable = false)\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df2.printSchema()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "f63e6f08-0a03-4129-b1cb-1254a1c638d2",
          "showTitle": false,
          "title": ""
        },
        "id": "BQLCw2DmJR5e",
        "outputId": "51e1ee4e-fb15-4495-817c-8207c2adf006",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'df2' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-76-1d45a0548e2e>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df2' is not defined"
          ]
        }
      ],
      "source": [
        "df2.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "cfee7e5c-46cc-4b90-b80b-f866276f7da2",
          "showTitle": false,
          "title": ""
        },
        "id": "hGUTiZiQJR5e"
      },
      "source": [
        "### 3.3) Models\n",
        "Let's transform the features into a vector format using PySpark's VectorAssembler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "09846497-b0a2-4e95-a3b9-622b2421d595",
          "showTitle": false,
          "title": ""
        },
        "id": "oclllYTXJR5e"
      },
      "outputs": [],
      "source": [
        "# PySPark Libraries\n",
        "from pyspark.mllib.linalg import Vectors\n",
        "from pyspark.ml.feature import VectorAssembler\n",
        "from pyspark.ml.feature import StringIndexer\n",
        "from pyspark.ml import Pipeline\n",
        "from pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n",
        "from pyspark.ml.evaluation import BinaryClassificationEvaluator\n",
        "from pyspark.ml.classification import LogisticRegression\n",
        "from pyspark.ml.classification import LinearSVC\n",
        "from pyspark.ml.classification import DecisionTreeClassifier\n",
        "from pyspark.ml.classification import RandomForestClassifier\n",
        "from pyspark.ml.classification import MultilayerPerceptronClassifier\n",
        "from pyspark.ml.evaluation import MulticlassClassificationEvaluator"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "f3d26830-ce04-4419-8474-8a0ad4684d26",
          "showTitle": false,
          "title": ""
        },
        "id": "wdjaXcfzJR5e"
      },
      "outputs": [],
      "source": [
        "assembler = VectorAssembler(\n",
        "  inputCols = ['Pclass', 'Sex','SibSp', 'Parch' ,'Embarked', 'Cabin2','AgeCategory'],\n",
        "  outputCol=\"features\"\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "83e90d10-6307-4dec-9d4d-d59011e2b0f7",
          "showTitle": false,
          "title": ""
        },
        "id": "T2Esj-NMJR5e"
      },
      "outputs": [],
      "source": [
        "test_size = 0.2\n",
        "test_seed = 2024\n",
        "train_data, test_data = df2.randomSplit([1-test_size,test_size],seed=test_seed)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "6ecab4d5-7290-4320-acac-a649e5871db0",
          "showTitle": false,
          "title": ""
        },
        "id": "SWUa7xQDJR5e",
        "outputId": "091b276c-a184-4d19-e8b9-7fc40a0df005",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\ntrain_data.printSchema()\\ntrain_data.show()\\ntrain_data.describe().show()\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ],
      "source": [
        "'''\n",
        "train_data.printSchema()\n",
        "train_data.show()\n",
        "train_data.describe().show()\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "bfbcaa6a-8f21-4782-9971-8eacb3ce2497",
          "showTitle": false,
          "title": ""
        },
        "id": "VRuAHGNGJR5e"
      },
      "outputs": [],
      "source": [
        "pipeline1 = Pipeline(stages=[assembler])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "c36d3b5e-9b0c-4027-a129-54b9172bfbdc",
          "showTitle": false,
          "title": ""
        },
        "id": "u22Gxd6uJR5e"
      },
      "outputs": [],
      "source": [
        "evaluator = BinaryClassificationEvaluator(labelCol=\"Survived\")\n",
        "\n",
        "def getCrossValidator(estimator, params, folds):\n",
        "  return CrossValidator(\n",
        "      estimator=estimator,\n",
        "      estimatorParamMaps=params,\n",
        "      evaluator=evaluator,\n",
        "      numFolds=folds,\n",
        "      seed=101\n",
        "  )"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "bd13ad50-c1a3-4cb0-909f-245da6308bf0",
          "showTitle": false,
          "title": ""
        },
        "id": "azoALtZEJR5f"
      },
      "source": [
        "#### 3.3.1) Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "e734d1eb-1526-4ae0-9ba3-a2f10b3bf192",
          "showTitle": false,
          "title": ""
        },
        "id": "18hFUarAJR5f",
        "outputId": "c6187ae3-6a84-42b2-c50d-89854d550ed0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "Py4JJavaError",
          "evalue": "An error occurred while calling o1456.fit.\n: java.lang.OutOfMemoryError: Java heap space\n",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-61-ceb0352ee6f5>\u001b[0m in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mpipeline_lr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPipeline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpipeline1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgetCrossValidator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr_hp_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mmodel_lr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpipeline_lr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# best model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    203\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m             raise TypeError(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/pipeline.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    132\u001b[0m                     \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# must be an Estimator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 134\u001b[0;31m                     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    135\u001b[0m                     \u001b[0mtransformers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mindexOfLastEstimator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    203\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m             raise TypeError(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/tuning.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    845\u001b[0m                 \u001b[0m_parallelFitTasks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meva\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m             )\n\u001b[0;32m--> 847\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubModel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimap_unordered\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    848\u001b[0m                 \u001b[0mmetrics_all\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/multiprocessing/pool.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    874\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m     \u001b[0m__next__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m                    \u001b[0;31m# XXX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/multiprocessing/pool.py\u001b[0m in \u001b[0;36mworker\u001b[0;34m(inqueue, outqueue, initializer, initargs, maxtasks, wrap_exception)\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0mjob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtask\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mwrap_exception\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfunc\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_helper_reraises_exception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/tuning.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f)\u001b[0m\n\u001b[1;32m    845\u001b[0m                 \u001b[0m_parallelFitTasks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meva\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m             )\n\u001b[0;32m--> 847\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubModel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimap_unordered\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    848\u001b[0m                 \u001b[0mmetrics_all\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/util.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0mSparkContext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_active_spark_context\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m             \u001b[0mSparkContext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_active_spark_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jsc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetLocalProperties\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproperties\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/tuning.py\u001b[0m in \u001b[0;36msingleTask\u001b[0;34m()\u001b[0m\n\u001b[1;32m    111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msingleTask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTransformer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m         \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodelIter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m         \u001b[0;31m# TODO: duplicate evaluator to take extra params from input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0;31m#  Note: Supporting tuning params in evaluator need update method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     96\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"No models remaining.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcounter\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 98\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfitSingleModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     99\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfitSingleModel\u001b[0;34m(index)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mfitSingleModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparamMaps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_FitMultipleIterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfitSingleModel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparamMaps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    201\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 203\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    204\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mJM\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 381\u001b[0;31m         \u001b[0mjava_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    382\u001b[0m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjava_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_copyValues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit_java\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_transfer_params_to_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 378\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_java_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mJM\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1320\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1321\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1322\u001b[0;31m         return_value = get_return_value(\n\u001b[0m\u001b[1;32m   1323\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[1;32m   1324\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/errors/exceptions/captured.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    177\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 179\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    180\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m             \u001b[0mconverted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvert_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    324\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mOUTPUT_CONVERTER\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgateway_client\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    325\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mREFERENCE_TYPE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 326\u001b[0;31m                 raise Py4JJavaError(\n\u001b[0m\u001b[1;32m    327\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    328\u001b[0m                     format(target_id, \".\", name), value)\n",
            "\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o1456.fit.\n: java.lang.OutOfMemoryError: Java heap space\n"
          ]
        }
      ],
      "source": [
        "lr = LogisticRegression(\n",
        "    featuresCol=\"features\",\n",
        "    labelCol=\"Survived\"\n",
        ")\n",
        "\n",
        "lr_hp_grid = ParamGridBuilder()\\\n",
        "    .addGrid(lr.regParam, [0.1, 0.01])\\\n",
        "    .addGrid(lr.elasticNetParam, [0.5, 1.0])\\\n",
        "    .build()\n",
        "\n",
        "pipeline_lr = Pipeline(stages=[pipeline1, getCrossValidator(lr, lr_hp_grid, 5)])\n",
        "\n",
        "model_lr = pipeline_lr.fit(train_data)\n",
        "\n",
        "# best model\n",
        "best_lr_model = model_lr.stages[-1].bestModel\n",
        "print(best_lr_model._java_obj)\n",
        "print(\"Best regularization parameter (regParam):\", best_lr_model._java_obj.getRegParam())\n",
        "print(\"Best elastic net parameter (elasticNetParam):\", best_lr_model._java_obj.getElasticNetParam())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "58cb316b-0999-40ee-9707-1be886f05b47",
          "showTitle": false,
          "title": ""
        },
        "id": "I5ENGxKZJR5f"
      },
      "outputs": [],
      "source": [
        "# lr with best parameters\n",
        "best_lr_model = LogisticRegression(\n",
        "    featuresCol=\"features\",\n",
        "    labelCol=\"Survived\",\n",
        "    regParam=best_lr_model._java_obj.getRegParam(),\n",
        "    elasticNetParam=best_lr_model._java_obj.getElasticNetParam()\n",
        ")\n",
        "\n",
        "pipeline_best_lr = Pipeline(stages=[pipeline1, best_lr_model])\n",
        "\n",
        "model1 = pipeline_best_lr.fit(train_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "bd13ad50-c1a3-4cb0-909f-245da6308bf0",
          "showTitle": false,
          "title": ""
        },
        "id": "kEQu1NcuRCS7"
      },
      "source": [
        "#### 3.3.2) Linear SVC"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "e734d1eb-1526-4ae0-9ba3-a2f10b3bf192",
          "showTitle": false,
          "title": ""
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "FyA5bXlNRCTI",
        "outputId": "8a0cd91b-176f-44ce-db78-a65e8b43e8d1"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "Py4JJavaError",
          "evalue": "An error occurred while calling o2107.fit.\n: java.lang.OutOfMemoryError: Java heap space\n",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-66-39f36d768d24>\u001b[0m in \u001b[0;36m<cell line: 18>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mpipeline_lsvc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPipeline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpipeline1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgetCrossValidator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlsvc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlsvc_hp_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mmodel_lsvc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpipeline_lsvc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# best model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    203\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m             raise TypeError(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/pipeline.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    132\u001b[0m                     \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# must be an Estimator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 134\u001b[0;31m                     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    135\u001b[0m                     \u001b[0mtransformers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mindexOfLastEstimator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    203\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m             raise TypeError(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/tuning.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    845\u001b[0m                 \u001b[0m_parallelFitTasks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meva\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m             )\n\u001b[0;32m--> 847\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubModel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimap_unordered\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    848\u001b[0m                 \u001b[0mmetrics_all\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/multiprocessing/pool.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    874\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m     \u001b[0m__next__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m                    \u001b[0;31m# XXX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/multiprocessing/pool.py\u001b[0m in \u001b[0;36mworker\u001b[0;34m(inqueue, outqueue, initializer, initargs, maxtasks, wrap_exception)\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0mjob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtask\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mwrap_exception\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfunc\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_helper_reraises_exception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/tuning.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f)\u001b[0m\n\u001b[1;32m    845\u001b[0m                 \u001b[0m_parallelFitTasks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meva\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m             )\n\u001b[0;32m--> 847\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubModel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimap_unordered\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    848\u001b[0m                 \u001b[0mmetrics_all\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/util.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0mSparkContext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_active_spark_context\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m             \u001b[0mSparkContext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_active_spark_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jsc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetLocalProperties\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproperties\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/tuning.py\u001b[0m in \u001b[0;36msingleTask\u001b[0;34m()\u001b[0m\n\u001b[1;32m    111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msingleTask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTransformer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m         \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodelIter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m         \u001b[0;31m# TODO: duplicate evaluator to take extra params from input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0;31m#  Note: Supporting tuning params in evaluator need update method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     96\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"No models remaining.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcounter\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 98\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfitSingleModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     99\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfitSingleModel\u001b[0;34m(index)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mfitSingleModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparamMaps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_FitMultipleIterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfitSingleModel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparamMaps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    201\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 203\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    204\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mJM\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 381\u001b[0;31m         \u001b[0mjava_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    382\u001b[0m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjava_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_copyValues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/ml/wrapper.py\u001b[0m in \u001b[0;36m_fit_java\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_transfer_params_to_java\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 378\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_java_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mJM\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1320\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1321\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1322\u001b[0;31m         return_value = get_return_value(\n\u001b[0m\u001b[1;32m   1323\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[1;32m   1324\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/errors/exceptions/captured.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    177\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 179\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    180\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m             \u001b[0mconverted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvert_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    324\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mOUTPUT_CONVERTER\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgateway_client\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    325\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mREFERENCE_TYPE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 326\u001b[0;31m                 raise Py4JJavaError(\n\u001b[0m\u001b[1;32m    327\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    328\u001b[0m                     format(target_id, \".\", name), value)\n",
            "\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o2107.fit.\n: java.lang.OutOfMemoryError: Java heap space\n"
          ]
        }
      ],
      "source": [
        "lsvc = LinearSVC(\n",
        "    featuresCol=\"features\",\n",
        "    labelCol=\"Survived\"\n",
        ")\n",
        "\n",
        "lsvc_hp_grid = ParamGridBuilder()\\\n",
        "    .addGrid(lsvc.maxIter, [5, 25, 50])\\\n",
        "    .addGrid(lsvc.regParam, [0.1, 0.3, 1.6])\\\n",
        "    .addGrid(lsvc.fitIntercept, [True, False])\\\n",
        "    .build()\n",
        "\n",
        "#additional parametres\n",
        "#.addGrid(lsvc.standardization, [True, False])\\\n",
        "#.addGrid(lsvc.loss, [\"hinge\", \"squaredHinge\"])\\\n",
        "\n",
        "pipeline_lsvc = Pipeline(stages=[pipeline1, getCrossValidator(lsvc, lsvc_hp_grid, 5)])\n",
        "\n",
        "model_lsvc = pipeline_lsvc.fit(train_data)\n",
        "\n",
        "# best model\n",
        "best_lsvc_model = model_lsvc.stages[-1].bestModel\n",
        "print(best_lsvc_model._java_obj)\n",
        "print(\"Max number of iterations (maxIter):\", best_lsvc_model._java_obj.getMaxIterParam())\n",
        "print(\"Best regularization parameter (regParam):\", best_lsvc_model._java_obj.getRegParam())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "58cb316b-0999-40ee-9707-1be886f05b47",
          "showTitle": false,
          "title": ""
        },
        "id": "mk-9ZPhHRCTI"
      },
      "outputs": [],
      "source": [
        "# lsvc with best parameters\n",
        "best_lsvc_model = LinearSVC(\n",
        "    featuresCol=\"features\",\n",
        "    labelCol=\"Survived\",\n",
        "    maxIter=best_lsvc_model._java_obj.getMaxIterParam()\n",
        "    regParam=best_lsvc_model._java_obj.getRegParam()\n",
        ")\n",
        "\n",
        "pipeline_best_lsvc = Pipeline(stages=[pipeline1, best_lsvc_model])\n",
        "\n",
        "model2 = pipeline_best_lsvc.fit(train_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "07da538c-d4ce-468f-b493-fe3555eb277b",
          "showTitle": false,
          "title": ""
        },
        "id": "ZkFRykixJR5f"
      },
      "source": [
        "#### 3.3.3) Decision Tree Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "ec9c32d2-abb3-4462-b4d1-050a5da23ad2",
          "showTitle": false,
          "title": ""
        },
        "id": "-IFAUKc6JR5f"
      },
      "outputs": [],
      "source": [
        "dt = DecisionTreeClassifier(\n",
        "    labelCol=\"Survived\"\n",
        ")\n",
        "\n",
        "dt_hp_grid = ParamGridBuilder() \\\n",
        "    .addGrid(dt.maxDepth, [5, 10, 15]) \\\n",
        "    .build()\n",
        "\n",
        "#more parametres\n",
        "#.addGrid(dt.maxBins, [32, 64]) \\\n",
        "#.addGrid(dt.minInstancesPerNode, [1, 5, 10]) \\\n",
        "#.addGrid(dt.impurity, ['gini', 'entropy']) \\\n",
        "\n",
        "pipeline_dt = Pipeline(stages=[pipeline1, getCrossValidator(dt, dt_hp_grid, 5)])\n",
        "\n",
        "model_dt = pipeline_dt.fit(train_data)\n",
        "\n",
        "# best model\n",
        "best_dt_model = model_dt.stages[-1].bestModel\n",
        "print(\"Best max depth:\", best_dt_model.getMaxDepth())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "ca452de8-59a9-42ed-9dc3-feb44475b742",
          "showTitle": false,
          "title": ""
        },
        "id": "zY1s277tJR5f"
      },
      "outputs": [],
      "source": [
        "best_pipeline_dt = Pipeline(stages=[pipeline1, best_dt_model])\n",
        "model3 = best_pipeline_dt.fit(train_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "07da538c-d4ce-468f-b493-fe3555eb277b",
          "showTitle": false,
          "title": ""
        },
        "id": "YPCqmd_-Rjxb"
      },
      "source": [
        "#### 3.3.4) Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "ec9c32d2-abb3-4462-b4d1-050a5da23ad2",
          "showTitle": false,
          "title": ""
        },
        "id": "q03HL-BGRjxk"
      },
      "outputs": [],
      "source": [
        "rf = RandomForestClassifier(\n",
        "    labelCol=\"Survived\"\n",
        ")\n",
        "\n",
        "rf_hp_grid = ParamGridBuilder() \\\n",
        "    .addGrid(rf.numTrees, [10, 20, 30]) \\\n",
        "    .addGrid(rf.maxDepth, [5, 10, 15]) \\\n",
        "    .build()\n",
        "\n",
        "pipeline_rf = Pipeline(stages=[pipeline1, getCrossValidator(rf, rf_hp_grid, 5)])\n",
        "\n",
        "model_rf = pipeline_rf.fit(train_data)\n",
        "\n",
        "# best model\n",
        "best_rf_model = model_rf.stages[-1].bestModel\n",
        "print(\"Best number of trees:\", best_rf_model.getNumTrees)\n",
        "print(\"Best max depth:\", best_rf_model.getMaxDepth())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "ca452de8-59a9-42ed-9dc3-feb44475b742",
          "showTitle": false,
          "title": ""
        },
        "id": "wSCC1k2pRjxl"
      },
      "outputs": [],
      "source": [
        "best_pipeline_rf = Pipeline(stages=[pipeline1, best_rf_model])\n",
        "model4 = best_pipeline_rf.fit(train_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "09e0c00c-cfa2-4021-9e18-7f5e2d74bdb3",
          "showTitle": false,
          "title": ""
        },
        "id": "xmBF99YKJR5f"
      },
      "source": [
        "#### 3.3.5) Multilayer Perceptron Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "5b4aec6e-1d14-4836-afcb-45606d692766",
          "showTitle": false,
          "title": ""
        },
        "id": "ZtJwujbPJR5f"
      },
      "outputs": [],
      "source": [
        "mlp = MultilayerPerceptronClassifier(\n",
        "    #maxIter=100\n",
        "    layers=[7,2], #change the number of input in relation to how many features\n",
        "    labelCol=\"Survived\"\n",
        ")\n",
        "\n",
        "mlp_hp_grid = ParamGridBuilder() \\\n",
        "    .addGrid(mlp.maxIter, [50, 100]) \\\n",
        "    .addGrid(mlp.stepSize, [0.03, 0.1]) \\\n",
        "    .build()\n",
        "\n",
        "pipeline_mlp = Pipeline(stages=[pipeline1, getCrossValidator(mlp, mlp_hp_grid, 5)])\n",
        "\n",
        "model_mlp = pipeline_mlp.fit(train_data)\n",
        "\n",
        "# best model\n",
        "best_perc_model = model_mlp.stages[-1].bestModel\n",
        "print(\"Best max iteration:\", best_perc_model.getMaxIter())\n",
        "print(\"Best step size:\", best_perc_model.getStepSize())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "3fb996f7-bfc5-4032-973c-920a44f452d2",
          "showTitle": false,
          "title": ""
        },
        "id": "5qyFBIN2JR5f"
      },
      "outputs": [],
      "source": [
        "best_pipeline_perc = Pipeline(stages=[pipeline1, best_perc_model])\n",
        "model5 = best_pipeline_perc.fit(train_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "31da129e-6270-4dc0-ae88-3a53f1fda1da",
          "showTitle": false,
          "title": ""
        },
        "id": "RdfM0PykJR5g"
      },
      "source": [
        "### 3.4) Models comparison"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "022b9073-8836-424f-acaa-1a675a1e41a7",
          "showTitle": false,
          "title": ""
        },
        "id": "DqGibDf4JR5g"
      },
      "outputs": [],
      "source": [
        "evaluator = BinaryClassificationEvaluator(labelCol=\"Survived\")\n",
        "\n",
        "models = [model1, model2, model3, model4, model5]\n",
        "model_names = [\"LR\", \"SVC\", \"DT\", \"RF\", \"MLP\"]\n",
        "\n",
        "for i in range(len(models)):\n",
        "    predictionsTrain = models[i].transform(train_data)\n",
        "    auc_train = evaluator.evaluate(predictionsTrain)\n",
        "    print(model_names[i])\n",
        "    print(\"AUC (train set): \", auc_train)\n",
        "\n",
        "    predictionsTest = models[i].transform(test_data)\n",
        "    auc_test = evaluator.evaluate(predictionsTest)\n",
        "    print(\"AUC (test set): \", auc_test)\n",
        "\n",
        "    accuracy = MulticlassClassificationEvaluator(labelCol='Survived', metricName='accuracy').evaluate(predictionsTest)\n",
        "    precision = MulticlassClassificationEvaluator(labelCol='Survived', metricName='weightedPrecision').evaluate(predictionsTest)\n",
        "    print('Accuracy: ', accuracy)\n",
        "    print('Precision: ', precision)\n",
        "    print('-----')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "4097146a-bf2b-46c6-8124-d25df8dfc131",
          "showTitle": false,
          "title": ""
        },
        "id": "TOKw6PwWJR5g"
      },
      "source": [
        "Validate this = Random Forest resulted the best model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "fe00fd4e-1290-46ce-8909-4cf11ffff37a",
          "showTitle": false,
          "title": ""
        },
        "id": "MTUKvuqYJR5g"
      },
      "source": [
        "### 3.5) Evaluation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "2f75c6ca-1dfb-433f-b0c0-fca3d52c6464",
          "showTitle": false,
          "title": ""
        },
        "id": "grB7EBC8JR5g"
      },
      "outputs": [],
      "source": [
        "import itertools\n",
        "\n",
        "def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):\n",
        "    \"\"\"\n",
        "    This function prints and plots the confusion matrix.\n",
        "    Normalization can be applied by setting `normalize=True`.\n",
        "    \"\"\"\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "        print(\"Normalized confusion matrix\")\n",
        "    else:\n",
        "        print('Confusion matrix, without normalization')\n",
        "\n",
        "    print(cm)\n",
        "\n",
        "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
        "    plt.title(title)\n",
        "    plt.colorbar()\n",
        "    tick_marks = np.arange(len(classes))\n",
        "    plt.xticks(tick_marks, classes, rotation=45)\n",
        "    plt.yticks(tick_marks, classes)\n",
        "\n",
        "    fmt = '.2f' if normalize else 'd'\n",
        "    thresh = cm.max() / 2.\n",
        "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
        "        plt.text(j, i, format(cm[i, j], fmt),\n",
        "                 horizontalalignment=\"center\",\n",
        "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "d5bd8a9b-b8fa-4697-b2d6-ab810f8cbca9",
          "showTitle": false,
          "title": ""
        },
        "id": "RV_7QMSNJR5g"
      },
      "outputs": [],
      "source": [
        "predictions = model4.transform(test_data) #JM FIX is the random forest still the best model?\n",
        "class_temp = predictions\\\n",
        "    .select(\"Survived\")\\\n",
        "    .groupBy(\"Survived\")\\\n",
        "    .count()\\\n",
        "    .sort('count', ascending=False)\\\n",
        "    .toPandas()\n",
        "\n",
        "class_temp = class_temp[\"Survived\"].values.tolist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "721ddb12-0f03-45b8-b2bd-f60756329cd2",
          "showTitle": false,
          "title": ""
        },
        "id": "CzPy8LGYJR5g"
      },
      "outputs": [],
      "source": [
        "predictions.printSchema()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "8836e378-0d50-4ca2-a407-97dcba2b5958",
          "showTitle": false,
          "title": ""
        },
        "id": "jlDpgUszJR5g"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "y_true = predictions.select(\"Survived\")\n",
        "y_true = y_true.toPandas()\n",
        "\n",
        "y_pred = predictions.select(\"prediction\")\n",
        "y_pred = y_pred.toPandas()\n",
        "\n",
        "cnf_matrix = confusion_matrix(y_true, y_pred)\n",
        "cnf_matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "e65dbd07-060e-415e-a947-abd043f7f049",
          "showTitle": false,
          "title": ""
        },
        "id": "t6zh8hNqJR5g"
      },
      "outputs": [],
      "source": [
        "# Plot non-normalized confusion matrix\n",
        "plt.figure()\n",
        "plot_confusion_matrix(\n",
        "    cnf_matrix,\n",
        "    classes=[\"0\", \"1\"],\n",
        "    title='Confusion matrix, without normalization'\n",
        ")\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "3b863c85-ee2b-4d65-872f-6e2d082db229",
          "showTitle": false,
          "title": ""
        },
        "id": "YMJD7Y05JR5g"
      },
      "outputs": [],
      "source": [
        "# Plot normalized confusion matrix\n",
        "plt.figure()\n",
        "plot_confusion_matrix(\n",
        "    cnf_matrix,\n",
        "    classes=[\"0\", \"1\"],\n",
        "    normalize=True,\n",
        "    title='Normalized confusion matrix'\n",
        ")\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "9179630a-f205-427c-8acf-1563e99f841b",
          "showTitle": false,
          "title": ""
        },
        "id": "yR56g13xJR5g"
      },
      "source": [
        "## 4) Conclusion"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "application/vnd.databricks.v1+cell": {
          "cellMetadata": {
            "byteLimit": 2048000,
            "rowLimit": 10000
          },
          "inputWidgets": {},
          "nuid": "a913f2a9-4bd3-486e-889d-e64203453abc",
          "showTitle": false,
          "title": ""
        },
        "id": "7vNXu7WAJR5h"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "application/vnd.databricks.v1+notebook": {
      "dashboards": [],
      "language": "python",
      "notebookMetadata": {
        "pythonIndentUnit": 4
      },
      "notebookName": "titanic-v3",
      "widgets": {}
    },
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "F5eEECWWJR5c",
        "YzbnayQoJR5d",
        "EZSFQPzTJR5d"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
